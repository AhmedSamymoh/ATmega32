
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002472  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002472  00002506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800082  00800082  00002528  2**0
                  ALLOC
  3 .stab         0000201c  00000000  00000000  00002528  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001146  00000000  00000000  00004544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000568a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000057ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005979  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000079be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a714  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__vector_1>
       8:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 83 11 	call	0x2306	; 0x2306 <main>
      8a:	0c 94 37 12 	jmp	0x246e	; 0x246e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GLOBAL_Interrupt_ENABLE>:
 *  Created on: Sep 22, 2023
 *      Author: AhmedSamy
 */
#include "EXTI_interface.h"

void GLOBAL_Interrupt_ENABLE(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_Register, I);
     ca6:	af e5       	ldi	r26, 0x5F	; 95
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e5       	ldi	r30, 0x5F	; 95
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <GLOBAL_Interrupt_DISABLE>:
void GLOBAL_Interrupt_DISABLE(){
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_Register, I);
     cc2:	af e5       	ldi	r26, 0x5F	; 95
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ef e5       	ldi	r30, 0x5F	; 95
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 68       	ori	r24, 0x80	; 128
     cce:	8c 93       	st	X, r24
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <EXT_Interrupt_Init>:

void EXT_Interrupt_Init(){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR , ISC01);
#elif EXTI0_MODE == FALLING_EDGE_MODE
	CLR_BIT(MCUCR , ISC00);
	SET_BIT(MCUCR , ISC01);
#elif EXTI0_MODE == RISING_EDGE_MODE
	SET_BIT(MCUCR , ISC00);
     cde:	a5 e5       	ldi	r26, 0x55	; 85
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e5 e5       	ldi	r30, 0x55	; 85
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	8c 93       	st	X, r24
	SET_BIT(MCUCR , ISC01);
     cec:	a5 e5       	ldi	r26, 0x55	; 85
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e5 e5       	ldi	r30, 0x55	; 85
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , ISC11);
#elif EXTI1_MODE == FALLING_EDGE_MODE
	CLR_BIT(MCUCR , ISC10);
	SET_BIT(MCUCR , ISC11);
#elif EXTI1_MODE == RISING_EDGE_MODE
	SET_BIT(MCUCR , ISC10);
     cfa:	a5 e5       	ldi	r26, 0x55	; 85
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e5 e5       	ldi	r30, 0x55	; 85
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
	SET_BIT(MCUCR , ISC11);
     d08:	a5 e5       	ldi	r26, 0x55	; 85
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e5 e5       	ldi	r30, 0x55	; 85
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	88 60       	ori	r24, 0x08	; 8
     d14:	8c 93       	st	X, r24
#else
#endif


#if EXTI2_MODE == FALLING_EDGE_MODE
	CLR_BIT(MCUCSR , ISC2);
     d16:	a4 e5       	ldi	r26, 0x54	; 84
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e4 e5       	ldi	r30, 0x54	; 84
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	8f 7b       	andi	r24, 0xBF	; 191
     d22:	8c 93       	st	X, r24
#elif EXTI2_MODE == RISING_EDGE_MODE
	SET_BIT(MCUCSR , ISC2);
#else
#endif

}
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <EXT_Interrupt_ENABLE>:
void EXT_Interrupt_ENABLE(uint8 INT_no){
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <EXT_Interrupt_ENABLE+0x6>
     d30:	0f 92       	push	r0
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	89 83       	std	Y+1, r24	; 0x01
	switch(INT_no)
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	3b 83       	std	Y+3, r19	; 0x03
     d40:	2a 83       	std	Y+2, r18	; 0x02
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	9b 81       	ldd	r25, Y+3	; 0x03
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	91 05       	cpc	r25, r1
     d4a:	89 f0       	breq	.+34     	; 0xd6e <EXT_Interrupt_ENABLE+0x44>
     d4c:	2a 81       	ldd	r18, Y+2	; 0x02
     d4e:	3b 81       	ldd	r19, Y+3	; 0x03
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	a1 f0       	breq	.+40     	; 0xd7e <EXT_Interrupt_ENABLE+0x54>
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	9b 81       	ldd	r25, Y+3	; 0x03
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	b9 f4       	brne	.+46     	; 0xd8c <EXT_Interrupt_ENABLE+0x62>
	{
		case EXTI0:
			SET_BIT(GICR , INT0);
     d5e:	ab e5       	ldi	r26, 0x5B	; 91
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	eb e5       	ldi	r30, 0x5B	; 91
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 64       	ori	r24, 0x40	; 64
     d6a:	8c 93       	st	X, r24
     d6c:	0f c0       	rjmp	.+30     	; 0xd8c <EXT_Interrupt_ENABLE+0x62>
			break;
		case EXTI1:
			SET_BIT(GICR , INT1);
     d6e:	ab e5       	ldi	r26, 0x5B	; 91
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	eb e5       	ldi	r30, 0x5B	; 91
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	80 68       	ori	r24, 0x80	; 128
     d7a:	8c 93       	st	X, r24
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <EXT_Interrupt_ENABLE+0x62>
			break;
		case EXTI2:
			SET_BIT(GICR , INT2);
     d7e:	ab e5       	ldi	r26, 0x5B	; 91
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	eb e5       	ldi	r30, 0x5B	; 91
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	80 62       	ori	r24, 0x20	; 32
     d8a:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <EXT_Interrupt_DISABLE>:
void EXT_Interrupt_DISABLE(uint8 INT_no){
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <EXT_Interrupt_DISABLE+0x6>
     d9e:	0f 92       	push	r0
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	89 83       	std	Y+1, r24	; 0x01
	switch(INT_no)
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3b 83       	std	Y+3, r19	; 0x03
     dae:	2a 83       	std	Y+2, r18	; 0x02
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	9b 81       	ldd	r25, Y+3	; 0x03
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	89 f0       	breq	.+34     	; 0xddc <EXT_Interrupt_DISABLE+0x44>
     dba:	2a 81       	ldd	r18, Y+2	; 0x02
     dbc:	3b 81       	ldd	r19, Y+3	; 0x03
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	a1 f0       	breq	.+40     	; 0xdec <EXT_Interrupt_DISABLE+0x54>
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	9b 81       	ldd	r25, Y+3	; 0x03
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	b9 f4       	brne	.+46     	; 0xdfa <EXT_Interrupt_DISABLE+0x62>
		{
			case EXTI0:
				CLR_BIT(GICR , INT0);
     dcc:	ab e5       	ldi	r26, 0x5B	; 91
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	eb e5       	ldi	r30, 0x5B	; 91
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	8f 7b       	andi	r24, 0xBF	; 191
     dd8:	8c 93       	st	X, r24
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <EXT_Interrupt_DISABLE+0x62>
				break;
			case EXTI1:
				CLR_BIT(GICR , INT1);
     ddc:	ab e5       	ldi	r26, 0x5B	; 91
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	eb e5       	ldi	r30, 0x5B	; 91
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8f 77       	andi	r24, 0x7F	; 127
     de8:	8c 93       	st	X, r24
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <EXT_Interrupt_DISABLE+0x62>
				break;
			case EXTI2:
				CLR_BIT(GICR , INT2);
     dec:	ab e5       	ldi	r26, 0x5B	; 91
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	eb e5       	ldi	r30, 0x5B	; 91
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	8f 7d       	andi	r24, 0xDF	; 223
     df8:	8c 93       	st	X, r24
				break;
			default:
				break;
		}
}
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <EXT_Interrupt_Set_Mode>:
void EXT_Interrupt_Set_Mode(uint8 INT_no , uint8 MODE){
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	2a 97       	sbiw	r28, 0x0a	; 10
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	6a 83       	std	Y+2, r22	; 0x02
	switch(INT_no)
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	3a 87       	std	Y+10, r19	; 0x0a
     e26:	29 87       	std	Y+9, r18	; 0x09
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	91 05       	cpc	r25, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <EXT_Interrupt_Set_Mode+0x2e>
     e32:	66 c0       	rjmp	.+204    	; 0xf00 <EXT_Interrupt_Set_Mode+0xfa>
     e34:	29 85       	ldd	r18, Y+9	; 0x09
     e36:	3a 85       	ldd	r19, Y+10	; 0x0a
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	09 f4       	brne	.+2      	; 0xe40 <EXT_Interrupt_Set_Mode+0x3a>
     e3e:	bb c0       	rjmp	.+374    	; 0xfb6 <EXT_Interrupt_Set_Mode+0x1b0>
     e40:	89 85       	ldd	r24, Y+9	; 0x09
     e42:	9a 85       	ldd	r25, Y+10	; 0x0a
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	09 f0       	breq	.+2      	; 0xe4a <EXT_Interrupt_Set_Mode+0x44>
     e48:	d5 c0       	rjmp	.+426    	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
	{
		case EXTI0:
			switch(MODE)
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	38 87       	std	Y+8, r19	; 0x08
     e52:	2f 83       	std	Y+7, r18	; 0x07
     e54:	8f 81       	ldd	r24, Y+7	; 0x07
     e56:	98 85       	ldd	r25, Y+8	; 0x08
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	91 05       	cpc	r25, r1
     e5c:	21 f1       	breq	.+72     	; 0xea6 <EXT_Interrupt_Set_Mode+0xa0>
     e5e:	2f 81       	ldd	r18, Y+7	; 0x07
     e60:	38 85       	ldd	r19, Y+8	; 0x08
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	2c f4       	brge	.+10     	; 0xe72 <EXT_Interrupt_Set_Mode+0x6c>
     e68:	8f 81       	ldd	r24, Y+7	; 0x07
     e6a:	98 85       	ldd	r25, Y+8	; 0x08
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	61 f0       	breq	.+24     	; 0xe88 <EXT_Interrupt_Set_Mode+0x82>
     e70:	c1 c0       	rjmp	.+386    	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
     e72:	2f 81       	ldd	r18, Y+7	; 0x07
     e74:	38 85       	ldd	r19, Y+8	; 0x08
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	99 f1       	breq	.+102    	; 0xee2 <EXT_Interrupt_Set_Mode+0xdc>
     e7c:	8f 81       	ldd	r24, Y+7	; 0x07
     e7e:	98 85       	ldd	r25, Y+8	; 0x08
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	91 05       	cpc	r25, r1
     e84:	f9 f0       	breq	.+62     	; 0xec4 <EXT_Interrupt_Set_Mode+0xbe>
     e86:	b6 c0       	rjmp	.+364    	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
			{
				case LOW_LEVEL_MODE:
					CLR_BIT(MCUCR , ISC00);
     e88:	a5 e5       	ldi	r26, 0x55	; 85
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e5 e5       	ldi	r30, 0x55	; 85
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8e 7f       	andi	r24, 0xFE	; 254
     e94:	8c 93       	st	X, r24
					CLR_BIT(MCUCR , ISC01);
     e96:	a5 e5       	ldi	r26, 0x55	; 85
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e5 e5       	ldi	r30, 0x55	; 85
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8d 7f       	andi	r24, 0xFD	; 253
     ea2:	8c 93       	st	X, r24
     ea4:	a7 c0       	rjmp	.+334    	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
					break;
				case FALLING_EDGE_MODE:
					CLR_BIT(MCUCR , ISC00);
     ea6:	a5 e5       	ldi	r26, 0x55	; 85
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e5 e5       	ldi	r30, 0x55	; 85
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8e 7f       	andi	r24, 0xFE	; 254
     eb2:	8c 93       	st	X, r24
					SET_BIT(MCUCR , ISC01);
     eb4:	a5 e5       	ldi	r26, 0x55	; 85
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e5 e5       	ldi	r30, 0x55	; 85
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	82 60       	ori	r24, 0x02	; 2
     ec0:	8c 93       	st	X, r24
     ec2:	98 c0       	rjmp	.+304    	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
					break;
				case IOC_MODE:
					SET_BIT(MCUCR,ISC00);
     ec4:	a5 e5       	ldi	r26, 0x55	; 85
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e5 e5       	ldi	r30, 0x55	; 85
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	81 60       	ori	r24, 0x01	; 1
     ed0:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,ISC01);
     ed2:	a5 e5       	ldi	r26, 0x55	; 85
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e5 e5       	ldi	r30, 0x55	; 85
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8d 7f       	andi	r24, 0xFD	; 253
     ede:	8c 93       	st	X, r24
     ee0:	89 c0       	rjmp	.+274    	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
					break;
				case RISING_EDGE_MODE:
					SET_BIT(MCUCR , ISC00);
     ee2:	a5 e5       	ldi	r26, 0x55	; 85
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e5       	ldi	r30, 0x55	; 85
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	81 60       	ori	r24, 0x01	; 1
     eee:	8c 93       	st	X, r24
					SET_BIT(MCUCR , ISC01);
     ef0:	a5 e5       	ldi	r26, 0x55	; 85
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e5 e5       	ldi	r30, 0x55	; 85
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	82 60       	ori	r24, 0x02	; 2
     efc:	8c 93       	st	X, r24
     efe:	7a c0       	rjmp	.+244    	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
				default:
						break;
			}
			break;
		case EXTI1:
			switch(MODE)
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3e 83       	std	Y+6, r19	; 0x06
     f08:	2d 83       	std	Y+5, r18	; 0x05
     f0a:	8d 81       	ldd	r24, Y+5	; 0x05
     f0c:	9e 81       	ldd	r25, Y+6	; 0x06
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	21 f1       	breq	.+72     	; 0xf5c <EXT_Interrupt_Set_Mode+0x156>
     f14:	2d 81       	ldd	r18, Y+5	; 0x05
     f16:	3e 81       	ldd	r19, Y+6	; 0x06
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	2c f4       	brge	.+10     	; 0xf28 <EXT_Interrupt_Set_Mode+0x122>
     f1e:	8d 81       	ldd	r24, Y+5	; 0x05
     f20:	9e 81       	ldd	r25, Y+6	; 0x06
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	61 f0       	breq	.+24     	; 0xf3e <EXT_Interrupt_Set_Mode+0x138>
     f26:	66 c0       	rjmp	.+204    	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
     f28:	2d 81       	ldd	r18, Y+5	; 0x05
     f2a:	3e 81       	ldd	r19, Y+6	; 0x06
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	99 f1       	breq	.+102    	; 0xf98 <EXT_Interrupt_Set_Mode+0x192>
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	91 05       	cpc	r25, r1
     f3a:	f9 f0       	breq	.+62     	; 0xf7a <EXT_Interrupt_Set_Mode+0x174>
     f3c:	5b c0       	rjmp	.+182    	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
			{
				case LOW_LEVEL_MODE:
					CLR_BIT(MCUCR , ISC10);
     f3e:	a5 e5       	ldi	r26, 0x55	; 85
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e5 e5       	ldi	r30, 0x55	; 85
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	8b 7f       	andi	r24, 0xFB	; 251
     f4a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR , ISC11);
     f4c:	a5 e5       	ldi	r26, 0x55	; 85
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e5 e5       	ldi	r30, 0x55	; 85
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	87 7f       	andi	r24, 0xF7	; 247
     f58:	8c 93       	st	X, r24
     f5a:	4c c0       	rjmp	.+152    	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
					break;
				case FALLING_EDGE_MODE:
					CLR_BIT(MCUCR , ISC10);
     f5c:	a5 e5       	ldi	r26, 0x55	; 85
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e5 e5       	ldi	r30, 0x55	; 85
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8b 7f       	andi	r24, 0xFB	; 251
     f68:	8c 93       	st	X, r24
					SET_BIT(MCUCR , ISC11);
     f6a:	a5 e5       	ldi	r26, 0x55	; 85
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e5 e5       	ldi	r30, 0x55	; 85
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	88 60       	ori	r24, 0x08	; 8
     f76:	8c 93       	st	X, r24
     f78:	3d c0       	rjmp	.+122    	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
					break;
				case IOC_MODE:
					SET_BIT(MCUCR,ISC10);
     f7a:	a5 e5       	ldi	r26, 0x55	; 85
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e5 e5       	ldi	r30, 0x55	; 85
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	84 60       	ori	r24, 0x04	; 4
     f86:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,ISC11);
     f88:	a5 e5       	ldi	r26, 0x55	; 85
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e5 e5       	ldi	r30, 0x55	; 85
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	87 7f       	andi	r24, 0xF7	; 247
     f94:	8c 93       	st	X, r24
     f96:	2e c0       	rjmp	.+92     	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
					break;
				case RISING_EDGE_MODE:
					SET_BIT(MCUCR , ISC10);
     f98:	a5 e5       	ldi	r26, 0x55	; 85
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e5 e5       	ldi	r30, 0x55	; 85
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	84 60       	ori	r24, 0x04	; 4
     fa4:	8c 93       	st	X, r24
					SET_BIT(MCUCR , ISC11);
     fa6:	a5 e5       	ldi	r26, 0x55	; 85
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e5 e5       	ldi	r30, 0x55	; 85
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	88 60       	ori	r24, 0x08	; 8
     fb2:	8c 93       	st	X, r24
     fb4:	1f c0       	rjmp	.+62     	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
				default:
						break;
			}
			break;
		case EXTI2:
			switch(MODE)
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3c 83       	std	Y+4, r19	; 0x04
     fbe:	2b 83       	std	Y+3, r18	; 0x03
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	91 05       	cpc	r25, r1
     fc8:	31 f0       	breq	.+12     	; 0xfd6 <EXT_Interrupt_Set_Mode+0x1d0>
     fca:	2b 81       	ldd	r18, Y+3	; 0x03
     fcc:	3c 81       	ldd	r19, Y+4	; 0x04
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	49 f0       	breq	.+18     	; 0xfe6 <EXT_Interrupt_Set_Mode+0x1e0>
     fd4:	0f c0       	rjmp	.+30     	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
			{

				case FALLING_EDGE_MODE:
					CLR_BIT(MCUCSR , ISC2);
     fd6:	a4 e5       	ldi	r26, 0x54	; 84
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e4 e5       	ldi	r30, 0x54	; 84
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8f 7b       	andi	r24, 0xBF	; 191
     fe2:	8c 93       	st	X, r24
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <EXT_Interrupt_Set_Mode+0x1ee>
					break;
				case RISING_EDGE_MODE:
					SET_BIT(MCUCSR , ISC2);
     fe6:	a4 e5       	ldi	r26, 0x54	; 84
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e4 e5       	ldi	r30, 0x54	; 84
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	80 64       	ori	r24, 0x40	; 64
     ff2:	8c 93       	st	X, r24
			}
			break;
		default:
			break;
	}
}
     ff4:	2a 96       	adiw	r28, 0x0a	; 10
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <DIO_SetPortDirection>:
 *
 * @parameter PortNo 		Port @(PORT_A , PORT_B , PORT_C ,PORT_D)
 * @parameter Direction 	Direction Of The Port @(PORT_INPUT , PORT_OUTPUT)
 ********************************************************************************/
void  DIO_SetPortDirection(uint8 PortNo , uint8 Direction)
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <DIO_SetPortDirection+0x6>
    100c:	00 d0       	rcall	.+0      	; 0x100e <DIO_SetPortDirection+0x8>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNo)
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	3c 83       	std	Y+4, r19	; 0x04
    101e:	2b 83       	std	Y+3, r18	; 0x03
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	9c 81       	ldd	r25, Y+4	; 0x04
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	91 05       	cpc	r25, r1
    1028:	d1 f0       	breq	.+52     	; 0x105e <DIO_SetPortDirection+0x58>
    102a:	2b 81       	ldd	r18, Y+3	; 0x03
    102c:	3c 81       	ldd	r19, Y+4	; 0x04
    102e:	22 30       	cpi	r18, 0x02	; 2
    1030:	31 05       	cpc	r19, r1
    1032:	2c f4       	brge	.+10     	; 0x103e <DIO_SetPortDirection+0x38>
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	61 f0       	breq	.+24     	; 0x1054 <DIO_SetPortDirection+0x4e>
    103c:	1e c0       	rjmp	.+60     	; 0x107a <DIO_SetPortDirection+0x74>
    103e:	2b 81       	ldd	r18, Y+3	; 0x03
    1040:	3c 81       	ldd	r19, Y+4	; 0x04
    1042:	22 30       	cpi	r18, 0x02	; 2
    1044:	31 05       	cpc	r19, r1
    1046:	81 f0       	breq	.+32     	; 0x1068 <DIO_SetPortDirection+0x62>
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	91 05       	cpc	r25, r1
    1050:	81 f0       	breq	.+32     	; 0x1072 <DIO_SetPortDirection+0x6c>
    1052:	13 c0       	rjmp	.+38     	; 0x107a <DIO_SetPortDirection+0x74>
	{
		case PORT_A:
				DDRA_register = Direction;
    1054:	ea e3       	ldi	r30, 0x3A	; 58
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	80 83       	st	Z, r24
    105c:	0e c0       	rjmp	.+28     	; 0x107a <DIO_SetPortDirection+0x74>
			break;

		case PORT_B:
				DDRB_register = Direction;
    105e:	e7 e3       	ldi	r30, 0x37	; 55
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	80 83       	st	Z, r24
    1066:	09 c0       	rjmp	.+18     	; 0x107a <DIO_SetPortDirection+0x74>
			break;

		case PORT_C:
				DDRC_register = Direction;
    1068:	e4 e3       	ldi	r30, 0x34	; 52
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	80 83       	st	Z, r24
    1070:	04 c0       	rjmp	.+8      	; 0x107a <DIO_SetPortDirection+0x74>
			break;
		case PORT_D:
				DDRD_register = Direction;
    1072:	e1 e3       	ldi	r30, 0x31	; 49
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <DIO_SetPortValue>:
 *
 * @parameter PortNo 		Port @(PORT_A , PORT_B , PORT_C ,PORT_D)
 * @parameter Value 	Direction Of The Port @(PORT_HIGH , PORT_LOW)
 ********************************************************************************/
void  DIO_SetPortValue(uint8 PortNo , uint8 Value)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <DIO_SetPortValue+0x6>
    108e:	00 d0       	rcall	.+0      	; 0x1090 <DIO_SetPortValue+0x8>
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNo)
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3c 83       	std	Y+4, r19	; 0x04
    10a0:	2b 83       	std	Y+3, r18	; 0x03
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	91 05       	cpc	r25, r1
    10aa:	d1 f0       	breq	.+52     	; 0x10e0 <DIO_SetPortValue+0x58>
    10ac:	2b 81       	ldd	r18, Y+3	; 0x03
    10ae:	3c 81       	ldd	r19, Y+4	; 0x04
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <DIO_SetPortValue+0x38>
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	61 f0       	breq	.+24     	; 0x10d6 <DIO_SetPortValue+0x4e>
    10be:	1e c0       	rjmp	.+60     	; 0x10fc <DIO_SetPortValue+0x74>
    10c0:	2b 81       	ldd	r18, Y+3	; 0x03
    10c2:	3c 81       	ldd	r19, Y+4	; 0x04
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	81 f0       	breq	.+32     	; 0x10ea <DIO_SetPortValue+0x62>
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	83 30       	cpi	r24, 0x03	; 3
    10d0:	91 05       	cpc	r25, r1
    10d2:	81 f0       	breq	.+32     	; 0x10f4 <DIO_SetPortValue+0x6c>
    10d4:	13 c0       	rjmp	.+38     	; 0x10fc <DIO_SetPortValue+0x74>
	{
		case PORT_A:
				PORTA_register = Value;
    10d6:	eb e3       	ldi	r30, 0x3B	; 59
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	80 83       	st	Z, r24
    10de:	0e c0       	rjmp	.+28     	; 0x10fc <DIO_SetPortValue+0x74>
			break;

		case PORT_B:
				PORTB_register = Value;
    10e0:	e8 e3       	ldi	r30, 0x38	; 56
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	80 83       	st	Z, r24
    10e8:	09 c0       	rjmp	.+18     	; 0x10fc <DIO_SetPortValue+0x74>
			break;

		case PORT_C:
				PORTC_register = Value;
    10ea:	e5 e3       	ldi	r30, 0x35	; 53
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	80 83       	st	Z, r24
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <DIO_SetPortValue+0x74>
			break;

		case PORT_D:
				PORTD_register = Value;
    10f4:	e2 e3       	ldi	r30, 0x32	; 50
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	80 83       	st	Z, r24
			break;

		default:
			break;
	}
}
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <DIO_GetPortValue>:
 *
 * @parameter PortNo 		Port @(PORT_A , PORT_B , PORT_C ,PORT_D)
 * @return 					local_return (1 , 0)
 ********************************************************************************/
uint8 DIO_GetPortValue(uint8 PortNo)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <DIO_GetPortValue+0x6>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <DIO_GetPortValue+0x8>
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	8a 83       	std	Y+2, r24	; 0x02
	uint8 local_return;
	if( (PortNo >= PORT_A) && (PortNo <= PORT_D) ) // Validation
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	a8 f5       	brcc	.+106    	; 0x118a <DIO_GetPortValue+0x80>
	{
		switch(PortNo)
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3d 83       	std	Y+5, r19	; 0x05
    1128:	2c 83       	std	Y+4, r18	; 0x04
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	d1 f0       	breq	.+52     	; 0x1168 <DIO_GetPortValue+0x5e>
    1134:	2c 81       	ldd	r18, Y+4	; 0x04
    1136:	3d 81       	ldd	r19, Y+5	; 0x05
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	2c f4       	brge	.+10     	; 0x1148 <DIO_GetPortValue+0x3e>
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	61 f0       	breq	.+24     	; 0x115e <DIO_GetPortValue+0x54>
    1146:	1e c0       	rjmp	.+60     	; 0x1184 <DIO_GetPortValue+0x7a>
    1148:	2c 81       	ldd	r18, Y+4	; 0x04
    114a:	3d 81       	ldd	r19, Y+5	; 0x05
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	81 f0       	breq	.+32     	; 0x1172 <DIO_GetPortValue+0x68>
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	81 f0       	breq	.+32     	; 0x117c <DIO_GetPortValue+0x72>
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <DIO_GetPortValue+0x7a>
		{
			case PORT_A:
				local_return = PINA_register;
    115e:	e9 e3       	ldi	r30, 0x39	; 57
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	0e c0       	rjmp	.+28     	; 0x1184 <DIO_GetPortValue+0x7a>
				break;
			case PORT_B:
				local_return = PINB_register;
    1168:	e6 e3       	ldi	r30, 0x36	; 54
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <DIO_GetPortValue+0x7a>
				break;
			case PORT_C:
				local_return = PINC_register;
    1172:	e3 e3       	ldi	r30, 0x33	; 51
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <DIO_GetPortValue+0x7a>
				break;
			case PORT_D:
				local_return = PIND_register;
    117c:	e0 e3       	ldi	r30, 0x30	; 48
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	89 83       	std	Y+1, r24	; 0x01
		}

	}else{
		return 0;
	}
	return local_return;
    1184:	99 81       	ldd	r25, Y+1	; 0x01
    1186:	9b 83       	std	Y+3, r25	; 0x03
    1188:	01 c0       	rjmp	.+2      	; 0x118c <DIO_GetPortValue+0x82>
			default:
				break;
		}

	}else{
		return 0;
    118a:	1b 82       	std	Y+3, r1	; 0x03
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return local_return;
}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <DIO_SetPinDirection>:
 * @parameter PortNo 		Port @(PORT_A , PORT_B , PORT_C ,PORT_D)
 * @parameter PinNo 		Pin Port @(PIN_0 - PIN_7)
 * @parameter Direction 	Direction Of The Port @(PORT_HIGH , PORT_LOW)
 ********************************************************************************/
void  DIO_SetPinDirection(uint8 PortNo , uint8 PinNo , uint8 Direction)
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <DIO_SetPinDirection+0x6>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <DIO_SetPinDirection+0x8>
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	6a 83       	std	Y+2, r22	; 0x02
    11b0:	4b 83       	std	Y+3, r20	; 0x03
	if( (PinNo >= PIN_0) && (PinNo <= PIN_7) && (PortNo >= PORT_A) && (PortNo <= PORT_D) ) // Validation
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	88 30       	cpi	r24, 0x08	; 8
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <DIO_SetPinDirection+0x1c>
    11b8:	e4 c0       	rjmp	.+456    	; 0x1382 <DIO_SetPinDirection+0x1e4>
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	84 30       	cpi	r24, 0x04	; 4
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <DIO_SetPinDirection+0x24>
    11c0:	e0 c0       	rjmp	.+448    	; 0x1382 <DIO_SetPinDirection+0x1e4>
	{
		switch(PortNo)
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3d 83       	std	Y+5, r19	; 0x05
    11ca:	2c 83       	std	Y+4, r18	; 0x04
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	91 05       	cpc	r25, r1
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <DIO_SetPinDirection+0x3a>
    11d6:	47 c0       	rjmp	.+142    	; 0x1266 <DIO_SetPinDirection+0xc8>
    11d8:	2c 81       	ldd	r18, Y+4	; 0x04
    11da:	3d 81       	ldd	r19, Y+5	; 0x05
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	2c f4       	brge	.+10     	; 0x11ec <DIO_SetPinDirection+0x4e>
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	9d 81       	ldd	r25, Y+5	; 0x05
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	71 f0       	breq	.+28     	; 0x1206 <DIO_SetPinDirection+0x68>
    11ea:	cb c0       	rjmp	.+406    	; 0x1382 <DIO_SetPinDirection+0x1e4>
    11ec:	2c 81       	ldd	r18, Y+4	; 0x04
    11ee:	3d 81       	ldd	r19, Y+5	; 0x05
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <DIO_SetPinDirection+0x5a>
    11f6:	67 c0       	rjmp	.+206    	; 0x12c6 <DIO_SetPinDirection+0x128>
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <DIO_SetPinDirection+0x66>
    1202:	91 c0       	rjmp	.+290    	; 0x1326 <DIO_SetPinDirection+0x188>
    1204:	be c0       	rjmp	.+380    	; 0x1382 <DIO_SetPinDirection+0x1e4>
		{
			case PORT_A:
				if(Direction == PIN_OUTPUT)
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	a1 f4       	brne	.+40     	; 0x1234 <DIO_SetPinDirection+0x96>
				{
					SET_BIT(DDRA_register , PinNo);
    120c:	aa e3       	ldi	r26, 0x3A	; 58
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ea e3       	ldi	r30, 0x3A	; 58
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_SetPinDirection+0x8c>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_SetPinDirection+0x88>
    122e:	84 2b       	or	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	a7 c0       	rjmp	.+334    	; 0x1382 <DIO_SetPinDirection+0x1e4>
				}else if(Direction == PIN_INPUT){
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	88 23       	and	r24, r24
    1238:	09 f0       	breq	.+2      	; 0x123c <DIO_SetPinDirection+0x9e>
    123a:	a3 c0       	rjmp	.+326    	; 0x1382 <DIO_SetPinDirection+0x1e4>
					CLR_BIT(DDRA_register , PinNo);
    123c:	aa e3       	ldi	r26, 0x3A	; 58
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	ea e3       	ldi	r30, 0x3A	; 58
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_SetPinDirection+0xbc>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_SetPinDirection+0xb8>
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	8e c0       	rjmp	.+284    	; 0x1382 <DIO_SetPinDirection+0x1e4>
				}else{

				}
				break;
			case PORT_B:
				if(Direction == PIN_OUTPUT)
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	a1 f4       	brne	.+40     	; 0x1294 <DIO_SetPinDirection+0xf6>
				{
					SET_BIT(DDRB_register , PinNo);
    126c:	a7 e3       	ldi	r26, 0x37	; 55
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e7 e3       	ldi	r30, 0x37	; 55
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_SetPinDirection+0xec>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_SetPinDirection+0xe8>
    128e:	84 2b       	or	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	77 c0       	rjmp	.+238    	; 0x1382 <DIO_SetPinDirection+0x1e4>
				}else if(Direction == PIN_INPUT){
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	88 23       	and	r24, r24
    1298:	09 f0       	breq	.+2      	; 0x129c <DIO_SetPinDirection+0xfe>
    129a:	73 c0       	rjmp	.+230    	; 0x1382 <DIO_SetPinDirection+0x1e4>
					CLR_BIT(DDRB_register , PinNo);
    129c:	a7 e3       	ldi	r26, 0x37	; 55
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e7 e3       	ldi	r30, 0x37	; 55
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_SetPinDirection+0x11c>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_SetPinDirection+0x118>
    12be:	80 95       	com	r24
    12c0:	84 23       	and	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	5e c0       	rjmp	.+188    	; 0x1382 <DIO_SetPinDirection+0x1e4>
				}else{

				}
				break;
			case PORT_C:
				if(Direction == PIN_OUTPUT)
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	a1 f4       	brne	.+40     	; 0x12f4 <DIO_SetPinDirection+0x156>
				{
					SET_BIT(DDRC_register , PinNo);
    12cc:	a4 e3       	ldi	r26, 0x34	; 52
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e4 e3       	ldi	r30, 0x34	; 52
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_SetPinDirection+0x14c>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_SetPinDirection+0x148>
    12ee:	84 2b       	or	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	47 c0       	rjmp	.+142    	; 0x1382 <DIO_SetPinDirection+0x1e4>
				}else if(Direction == PIN_INPUT){
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 23       	and	r24, r24
    12f8:	09 f0       	breq	.+2      	; 0x12fc <DIO_SetPinDirection+0x15e>
    12fa:	43 c0       	rjmp	.+134    	; 0x1382 <DIO_SetPinDirection+0x1e4>
					CLR_BIT(DDRC_register , PinNo);
    12fc:	a4 e3       	ldi	r26, 0x34	; 52
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e3       	ldi	r30, 0x34	; 52
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_SetPinDirection+0x17c>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_SetPinDirection+0x178>
    131e:	80 95       	com	r24
    1320:	84 23       	and	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	2e c0       	rjmp	.+92     	; 0x1382 <DIO_SetPinDirection+0x1e4>
				}else{

				}
				break;
			case PORT_D:
				if(Direction == PIN_OUTPUT)
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	a1 f4       	brne	.+40     	; 0x1354 <DIO_SetPinDirection+0x1b6>
				{
					SET_BIT(DDRD_register , PinNo);
    132c:	a1 e3       	ldi	r26, 0x31	; 49
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e1 e3       	ldi	r30, 0x31	; 49
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_SetPinDirection+0x1ac>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_SetPinDirection+0x1a8>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	17 c0       	rjmp	.+46     	; 0x1382 <DIO_SetPinDirection+0x1e4>
				}else if(Direction == PIN_INPUT){
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	88 23       	and	r24, r24
    1358:	a1 f4       	brne	.+40     	; 0x1382 <DIO_SetPinDirection+0x1e4>
					CLR_BIT(DDRD_register , PinNo);
    135a:	a1 e3       	ldi	r26, 0x31	; 49
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e1 e3       	ldi	r30, 0x31	; 49
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <DIO_SetPinDirection+0x1da>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <DIO_SetPinDirection+0x1d6>
    137c:	80 95       	com	r24
    137e:	84 23       	and	r24, r20
    1380:	8c 93       	st	X, r24
		}
	}else{

	}

}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <DIO_SetPinValue>:
 * @parameter PortNo 		Port @(PORT_A , PORT_B , PORT_C ,PORT_D)
 * @parameter PinNo 		Pin Port @(PIN_0 - PIN_7)
 * @parameter Direction 	Direction Of The Port @(PORT_HIGH , PORT_LOW)
 ********************************************************************************/
void  DIO_SetPinValue(uint8 PortNo , uint8 PinNo , uint8 Value)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <DIO_SetPinValue+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <DIO_SetPinValue+0x8>
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	6a 83       	std	Y+2, r22	; 0x02
    13a4:	4b 83       	std	Y+3, r20	; 0x03
	if( (PinNo >= PIN_0) && (PinNo <= PIN_7) )// Validation
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	88 30       	cpi	r24, 0x08	; 8
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <DIO_SetPinValue+0x1c>
    13ac:	e0 c0       	rjmp	.+448    	; 0x156e <DIO_SetPinValue+0x1dc>
	{
		switch(PortNo)
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	3d 83       	std	Y+5, r19	; 0x05
    13b6:	2c 83       	std	Y+4, r18	; 0x04
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	91 05       	cpc	r25, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <DIO_SetPinValue+0x32>
    13c2:	47 c0       	rjmp	.+142    	; 0x1452 <DIO_SetPinValue+0xc0>
    13c4:	2c 81       	ldd	r18, Y+4	; 0x04
    13c6:	3d 81       	ldd	r19, Y+5	; 0x05
    13c8:	22 30       	cpi	r18, 0x02	; 2
    13ca:	31 05       	cpc	r19, r1
    13cc:	2c f4       	brge	.+10     	; 0x13d8 <DIO_SetPinValue+0x46>
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	9d 81       	ldd	r25, Y+5	; 0x05
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	71 f0       	breq	.+28     	; 0x13f2 <DIO_SetPinValue+0x60>
    13d6:	cb c0       	rjmp	.+406    	; 0x156e <DIO_SetPinValue+0x1dc>
    13d8:	2c 81       	ldd	r18, Y+4	; 0x04
    13da:	3d 81       	ldd	r19, Y+5	; 0x05
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DIO_SetPinValue+0x52>
    13e2:	67 c0       	rjmp	.+206    	; 0x14b2 <DIO_SetPinValue+0x120>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	91 05       	cpc	r25, r1
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <DIO_SetPinValue+0x5e>
    13ee:	91 c0       	rjmp	.+290    	; 0x1512 <DIO_SetPinValue+0x180>
    13f0:	be c0       	rjmp	.+380    	; 0x156e <DIO_SetPinValue+0x1dc>
			{
				case PORT_A:
					if(Value == PIN_HIGH)
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	a1 f4       	brne	.+40     	; 0x1420 <DIO_SetPinValue+0x8e>
					{
						SET_BIT(PORTA_register , PinNo);
    13f8:	ab e3       	ldi	r26, 0x3B	; 59
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	eb e3       	ldi	r30, 0x3B	; 59
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_SetPinValue+0x84>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_SetPinValue+0x80>
    141a:	84 2b       	or	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	a7 c0       	rjmp	.+334    	; 0x156e <DIO_SetPinValue+0x1dc>
					}else if(Value == PIN_LOW){
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	88 23       	and	r24, r24
    1424:	09 f0       	breq	.+2      	; 0x1428 <DIO_SetPinValue+0x96>
    1426:	a3 c0       	rjmp	.+326    	; 0x156e <DIO_SetPinValue+0x1dc>
						CLR_BIT(PORTA_register , PinNo);
    1428:	ab e3       	ldi	r26, 0x3B	; 59
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	eb e3       	ldi	r30, 0x3B	; 59
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_SetPinValue+0xb4>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_SetPinValue+0xb0>
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	8e c0       	rjmp	.+284    	; 0x156e <DIO_SetPinValue+0x1dc>
					}else{

					}
					break;
				case PORT_B:
					if(Value == PIN_HIGH)
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	a1 f4       	brne	.+40     	; 0x1480 <DIO_SetPinValue+0xee>
					{
						SET_BIT(PORTB_register , PinNo);
    1458:	a8 e3       	ldi	r26, 0x38	; 56
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e8 e3       	ldi	r30, 0x38	; 56
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_SetPinValue+0xe4>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_SetPinValue+0xe0>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	77 c0       	rjmp	.+238    	; 0x156e <DIO_SetPinValue+0x1dc>
					}else if(Value == PIN_LOW){
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	88 23       	and	r24, r24
    1484:	09 f0       	breq	.+2      	; 0x1488 <DIO_SetPinValue+0xf6>
    1486:	73 c0       	rjmp	.+230    	; 0x156e <DIO_SetPinValue+0x1dc>
						CLR_BIT(PORTB_register , PinNo);
    1488:	a8 e3       	ldi	r26, 0x38	; 56
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e8 e3       	ldi	r30, 0x38	; 56
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <DIO_SetPinValue+0x114>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <DIO_SetPinValue+0x110>
    14aa:	80 95       	com	r24
    14ac:	84 23       	and	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	5e c0       	rjmp	.+188    	; 0x156e <DIO_SetPinValue+0x1dc>
					}else{

					}
					break;
				case PORT_C:
					if(Value == PIN_HIGH)
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	a1 f4       	brne	.+40     	; 0x14e0 <DIO_SetPinValue+0x14e>
					{
						SET_BIT(PORTC_register , PinNo);
    14b8:	a5 e3       	ldi	r26, 0x35	; 53
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e3       	ldi	r30, 0x35	; 53
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_SetPinValue+0x144>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <DIO_SetPinValue+0x140>
    14da:	84 2b       	or	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	47 c0       	rjmp	.+142    	; 0x156e <DIO_SetPinValue+0x1dc>
					}else if(Value == PIN_LOW){
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	88 23       	and	r24, r24
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <DIO_SetPinValue+0x156>
    14e6:	43 c0       	rjmp	.+134    	; 0x156e <DIO_SetPinValue+0x1dc>
						CLR_BIT(PORTC_register , PinNo);
    14e8:	a5 e3       	ldi	r26, 0x35	; 53
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e5 e3       	ldi	r30, 0x35	; 53
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <DIO_SetPinValue+0x174>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <DIO_SetPinValue+0x170>
    150a:	80 95       	com	r24
    150c:	84 23       	and	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	2e c0       	rjmp	.+92     	; 0x156e <DIO_SetPinValue+0x1dc>
					}else{

					}
					break;
				case PORT_D:
					if(Value == PIN_HIGH)
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	a1 f4       	brne	.+40     	; 0x1540 <DIO_SetPinValue+0x1ae>
					{
						SET_BIT(PORTD_register , PinNo);
    1518:	a2 e3       	ldi	r26, 0x32	; 50
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e2 e3       	ldi	r30, 0x32	; 50
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_SetPinValue+0x1a4>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <DIO_SetPinValue+0x1a0>
    153a:	84 2b       	or	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	17 c0       	rjmp	.+46     	; 0x156e <DIO_SetPinValue+0x1dc>
					}else if(Value == PIN_LOW){
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	88 23       	and	r24, r24
    1544:	a1 f4       	brne	.+40     	; 0x156e <DIO_SetPinValue+0x1dc>
						CLR_BIT(PORTD_register , PinNo);
    1546:	a2 e3       	ldi	r26, 0x32	; 50
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e2 e3       	ldi	r30, 0x32	; 50
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_SetPinValue+0x1d2>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_SetPinValue+0x1ce>
    1568:	80 95       	com	r24
    156a:	84 23       	and	r24, r20
    156c:	8c 93       	st	X, r24
			}
	}else{

	}

}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <DIO_TogPinValue>:
 *
 * @parameter PortNo 		Port @(PORT_A , PORT_B , PORT_C ,PORT_D)
 * @parameter PinNo 		Pin Port @(PIN_0 - PIN_7)
 ********************************************************************************/
void DIO_TogPinValue(uint8 PortNo, uint8 PinNo)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	00 d0       	rcall	.+0      	; 0x1584 <DIO_TogPinValue+0x6>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <DIO_TogPinValue+0x8>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNo)
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	3c 83       	std	Y+4, r19	; 0x04
    1596:	2b 83       	std	Y+3, r18	; 0x03
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 05       	cpc	r25, r1
    15a0:	49 f1       	breq	.+82     	; 0x15f4 <DIO_TogPinValue+0x76>
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <DIO_TogPinValue+0x38>
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	61 f0       	breq	.+24     	; 0x15cc <DIO_TogPinValue+0x4e>
    15b4:	5a c0       	rjmp	.+180    	; 0x166a <DIO_TogPinValue+0xec>
    15b6:	2b 81       	ldd	r18, Y+3	; 0x03
    15b8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	71 f1       	breq	.+92     	; 0x161c <DIO_TogPinValue+0x9e>
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	83 30       	cpi	r24, 0x03	; 3
    15c6:	91 05       	cpc	r25, r1
    15c8:	e9 f1       	breq	.+122    	; 0x1644 <DIO_TogPinValue+0xc6>
    15ca:	4f c0       	rjmp	.+158    	; 0x166a <DIO_TogPinValue+0xec>
	{
		case PORT_A:
			TOG_BIT(PORTA_register , PinNo);
    15cc:	ab e3       	ldi	r26, 0x3B	; 59
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	eb e3       	ldi	r30, 0x3B	; 59
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_TogPinValue+0x6c>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_TogPinValue+0x68>
    15ee:	84 27       	eor	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	3b c0       	rjmp	.+118    	; 0x166a <DIO_TogPinValue+0xec>
			break;
		case PORT_B:
			TOG_BIT(PORTB_register , PinNo);
    15f4:	a8 e3       	ldi	r26, 0x38	; 56
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e8 e3       	ldi	r30, 0x38	; 56
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_TogPinValue+0x94>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_TogPinValue+0x90>
    1616:	84 27       	eor	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	27 c0       	rjmp	.+78     	; 0x166a <DIO_TogPinValue+0xec>
			break;
		case PORT_C:
			TOG_BIT(PORTC_register , PinNo);
    161c:	a5 e3       	ldi	r26, 0x35	; 53
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e5 e3       	ldi	r30, 0x35	; 53
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <DIO_TogPinValue+0xbc>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <DIO_TogPinValue+0xb8>
    163e:	84 27       	eor	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	13 c0       	rjmp	.+38     	; 0x166a <DIO_TogPinValue+0xec>
			break;
		case PORT_D:
			TOG_BIT(PORTD_register , PinNo);
    1644:	a2 e3       	ldi	r26, 0x32	; 50
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e2 e3       	ldi	r30, 0x32	; 50
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_TogPinValue+0xe4>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_TogPinValue+0xe0>
    1666:	84 27       	eor	r24, r20
    1668:	8c 93       	st	X, r24
		default:
			break;
	}


}
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <DIO_GetPinValue>:
 * @parameter PortNo 		Port @(PORT_A , PORT_B , PORT_C ,PORT_D)
 * @parameter PinNo 		Pin Port @(PIN_0 - PIN_7)
 * @return 					local_return (1 , 0)
 ********************************************************************************/
uint8 DIO_GetPinValue(uint8 PortNo, uint8 PinNo)
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	00 d0       	rcall	.+0      	; 0x167e <DIO_GetPinValue+0x6>
    167e:	00 d0       	rcall	.+0      	; 0x1680 <DIO_GetPinValue+0x8>
    1680:	0f 92       	push	r0
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	8a 83       	std	Y+2, r24	; 0x02
    1688:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_return;
	if( (PinNo >= PIN_0) && (PinNo <= PIN_7) && (PortNo >= PORT_A) && (PortNo <= PORT_D) ) // Validation
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	88 30       	cpi	r24, 0x08	; 8
    168e:	08 f0       	brcs	.+2      	; 0x1692 <DIO_GetPinValue+0x1a>
    1690:	6b c0       	rjmp	.+214    	; 0x1768 <DIO_GetPinValue+0xf0>
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	84 30       	cpi	r24, 0x04	; 4
    1696:	08 f0       	brcs	.+2      	; 0x169a <DIO_GetPinValue+0x22>
    1698:	67 c0       	rjmp	.+206    	; 0x1768 <DIO_GetPinValue+0xf0>
	{
		switch(PortNo)
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	3d 83       	std	Y+5, r19	; 0x05
    16a2:	2c 83       	std	Y+4, r18	; 0x04
    16a4:	4c 81       	ldd	r20, Y+4	; 0x04
    16a6:	5d 81       	ldd	r21, Y+5	; 0x05
    16a8:	41 30       	cpi	r20, 0x01	; 1
    16aa:	51 05       	cpc	r21, r1
    16ac:	41 f1       	breq	.+80     	; 0x16fe <DIO_GetPinValue+0x86>
    16ae:	8c 81       	ldd	r24, Y+4	; 0x04
    16b0:	9d 81       	ldd	r25, Y+5	; 0x05
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	91 05       	cpc	r25, r1
    16b6:	34 f4       	brge	.+12     	; 0x16c4 <DIO_GetPinValue+0x4c>
    16b8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ba:	3d 81       	ldd	r19, Y+5	; 0x05
    16bc:	21 15       	cp	r18, r1
    16be:	31 05       	cpc	r19, r1
    16c0:	61 f0       	breq	.+24     	; 0x16da <DIO_GetPinValue+0x62>
    16c2:	52 c0       	rjmp	.+164    	; 0x1768 <DIO_GetPinValue+0xf0>
    16c4:	4c 81       	ldd	r20, Y+4	; 0x04
    16c6:	5d 81       	ldd	r21, Y+5	; 0x05
    16c8:	42 30       	cpi	r20, 0x02	; 2
    16ca:	51 05       	cpc	r21, r1
    16cc:	51 f1       	breq	.+84     	; 0x1722 <DIO_GetPinValue+0xaa>
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	9d 81       	ldd	r25, Y+5	; 0x05
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	91 05       	cpc	r25, r1
    16d6:	b9 f1       	breq	.+110    	; 0x1746 <DIO_GetPinValue+0xce>
    16d8:	47 c0       	rjmp	.+142    	; 0x1768 <DIO_GetPinValue+0xf0>
		{
			case PORT_A:
				local_return = GET_BIT(PINA_register , PinNo);
    16da:	e9 e3       	ldi	r30, 0x39	; 57
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	88 2f       	mov	r24, r24
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a9 01       	movw	r20, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_GetPinValue+0x7a>
    16ee:	55 95       	asr	r21
    16f0:	47 95       	ror	r20
    16f2:	8a 95       	dec	r24
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <DIO_GetPinValue+0x76>
    16f6:	ca 01       	movw	r24, r20
    16f8:	81 70       	andi	r24, 0x01	; 1
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	35 c0       	rjmp	.+106    	; 0x1768 <DIO_GetPinValue+0xf0>
				break;
			case PORT_B:
				local_return = GET_BIT(PINB_register , PinNo);
    16fe:	e6 e3       	ldi	r30, 0x36	; 54
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	88 2f       	mov	r24, r24
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	a9 01       	movw	r20, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_GetPinValue+0x9e>
    1712:	55 95       	asr	r21
    1714:	47 95       	ror	r20
    1716:	8a 95       	dec	r24
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <DIO_GetPinValue+0x9a>
    171a:	ca 01       	movw	r24, r20
    171c:	81 70       	andi	r24, 0x01	; 1
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	23 c0       	rjmp	.+70     	; 0x1768 <DIO_GetPinValue+0xf0>
				break;
			case PORT_C:
				local_return = GET_BIT(PINC_register , PinNo);
    1722:	e3 e3       	ldi	r30, 0x33	; 51
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	88 2f       	mov	r24, r24
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a9 01       	movw	r20, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <DIO_GetPinValue+0xc2>
    1736:	55 95       	asr	r21
    1738:	47 95       	ror	r20
    173a:	8a 95       	dec	r24
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <DIO_GetPinValue+0xbe>
    173e:	ca 01       	movw	r24, r20
    1740:	81 70       	andi	r24, 0x01	; 1
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	11 c0       	rjmp	.+34     	; 0x1768 <DIO_GetPinValue+0xf0>
				break;
			case PORT_D:
				local_return = GET_BIT(PIND_register , PinNo);
    1746:	e0 e3       	ldi	r30, 0x30	; 48
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	88 2f       	mov	r24, r24
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a9 01       	movw	r20, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <DIO_GetPinValue+0xe6>
    175a:	55 95       	asr	r21
    175c:	47 95       	ror	r20
    175e:	8a 95       	dec	r24
    1760:	e2 f7       	brpl	.-8      	; 0x175a <DIO_GetPinValue+0xe2>
    1762:	ca 01       	movw	r24, r20
    1764:	81 70       	andi	r24, 0x01	; 1
    1766:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}else{

	}
	return local_return;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
}
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <SEGMENT_Init>:
    0b01111111, // 8
    0b01101111  // 9
};


void SEGMENT_Init(uint8 DataPort ,uint8 ControlPort , uint8 ControlPin , uint8 SegType){
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <SEGMENT_Init+0x6>
    1780:	00 d0       	rcall	.+0      	; 0x1782 <SEGMENT_Init+0x8>
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	6a 83       	std	Y+2, r22	; 0x02
    178a:	4b 83       	std	Y+3, r20	; 0x03
    178c:	2c 83       	std	Y+4, r18	; 0x04
	if(COMMON_CATHODE == SegType)
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	88 23       	and	r24, r24
    1792:	51 f4       	brne	.+20     	; 0x17a8 <SEGMENT_Init+0x2e>
	{
		DIO_SetPinDirection( ControlPort, ControlPin, PIN_OUTPUT);
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	6b 81       	ldd	r22, Y+3	; 0x03
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_SetPinDirection>
		DIO_SetPortDirection( DataPort, PORT_OUTPUT);
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	6f ef       	ldi	r22, 0xFF	; 255
    17a2:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_SetPortDirection>
    17a6:	0c c0       	rjmp	.+24     	; 0x17c0 <SEGMENT_Init+0x46>
	}else if(COMMON_ANODE == SegType)
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	49 f4       	brne	.+18     	; 0x17c0 <SEGMENT_Init+0x46>
	{
		DIO_SetPinDirection( ControlPort, ControlPin, PIN_OUTPUT);
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	6b 81       	ldd	r22, Y+3	; 0x03
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_SetPinDirection>
		DIO_SetPortDirection( DataPort, PORT_OUTPUT);
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	6f ef       	ldi	r22, 0xFF	; 255
    17bc:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_SetPortDirection>
	}
	else{

	}
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <SEGMENT_Enable>:
void SEGMENT_Enable(uint8 ControlPort , uint8 ControlPin , uint8 SegType){
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <SEGMENT_Enable+0x6>
    17d4:	0f 92       	push	r0
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	6a 83       	std	Y+2, r22	; 0x02
    17de:	4b 83       	std	Y+3, r20	; 0x03
	if(COMMON_CATHODE == SegType)
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	88 23       	and	r24, r24
    17e4:	31 f4       	brne	.+12     	; 0x17f2 <SEGMENT_Enable+0x24>
	{
		DIO_SetPinValue( ControlPort, ControlPin, ENABLE_COMMON_CATHODE);
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	6a 81       	ldd	r22, Y+2	; 0x02
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>
    17f0:	08 c0       	rjmp	.+16     	; 0x1802 <SEGMENT_Enable+0x34>

	}else if(COMMON_ANODE == SegType)
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	29 f4       	brne	.+10     	; 0x1802 <SEGMENT_Enable+0x34>
	{
		DIO_SetPinValue( ControlPort, ControlPin, ENABLE_COMMON_ANODE);
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	6a 81       	ldd	r22, Y+2	; 0x02
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>
	}
	else{

	}
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <SEGMENT_Disable>:
void SEGMENT_Disable(uint8 ControlPort , uint8 ControlPin , uint8 SegType){
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <SEGMENT_Disable+0x6>
    1814:	0f 92       	push	r0
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	6a 83       	std	Y+2, r22	; 0x02
    181e:	4b 83       	std	Y+3, r20	; 0x03
	if(COMMON_CATHODE == SegType)
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	88 23       	and	r24, r24
    1824:	31 f4       	brne	.+12     	; 0x1832 <SEGMENT_Disable+0x24>
	{
		DIO_SetPinValue( ControlPort, ControlPin, DISABLE_COMMON_CATHODE);
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	6a 81       	ldd	r22, Y+2	; 0x02
    182a:	41 e0       	ldi	r20, 0x01	; 1
    182c:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <SEGMENT_Disable+0x34>

	}else if(COMMON_ANODE == SegType)
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	29 f4       	brne	.+10     	; 0x1842 <SEGMENT_Disable+0x34>
	{
		DIO_SetPinValue( ControlPort, ControlPin, DISABLE_COMMON_ANODE);
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	6a 81       	ldd	r22, Y+2	; 0x02
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>
	}
	else{

	}
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <SEGMENT_Display>:
void SEGMENT_Display(uint8 DataPort ,uint8 SegType , uint8 Number){
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	00 d0       	rcall	.+0      	; 0x1854 <SEGMENT_Display+0x6>
    1854:	0f 92       	push	r0
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	6a 83       	std	Y+2, r22	; 0x02
    185e:	4b 83       	std	Y+3, r20	; 0x03


	if(COMMON_CATHODE == SegType)
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	88 23       	and	r24, r24
    1864:	61 f4       	brne	.+24     	; 0x187e <SEGMENT_Display+0x30>
	{
		DIO_SetPortValue( DataPort, Segments_Arr[Number]);
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	fc 01       	movw	r30, r24
    186e:	e8 59       	subi	r30, 0x98	; 152
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	90 81       	ld	r25, Z
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	69 2f       	mov	r22, r25
    1878:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_SetPortValue>
    187c:	10 c0       	rjmp	.+32     	; 0x189e <SEGMENT_Display+0x50>

	}else if(COMMON_ANODE == SegType)
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	69 f4       	brne	.+26     	; 0x189e <SEGMENT_Display+0x50>
	{
		DIO_SetPortValue( DataPort , ~Segments_Arr[Number]);
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	fc 01       	movw	r30, r24
    188c:	e8 59       	subi	r30, 0x98	; 152
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 81       	ld	r24, Z
    1892:	98 2f       	mov	r25, r24
    1894:	90 95       	com	r25
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	69 2f       	mov	r22, r25
    189a:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_SetPortValue>
	}
	else{

	}
}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <LCD_Init>:

/*******************************************************************************
 * @brief Initialize The LCD in 8 bit mode - Cursor off
 ********************************************************************************/
void LCD_Init(void)
{
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	ca 55       	subi	r28, 0x5A	; 90
    18b8:	d0 40       	sbci	r29, 0x00	; 0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
	/*Initialization of LCD Pins*/
	DIO_SetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_OUTPUT);
    18c4:	83 e0       	ldi	r24, 0x03	; 3
    18c6:	64 e0       	ldi	r22, 0x04	; 4
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,PIN_OUTPUT);
    18ce:	83 e0       	ldi	r24, 0x03	; 3
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_OUTPUT);
    18d8:	83 e0       	ldi	r24, 0x03	; 3
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	41 e0       	ldi	r20, 0x01	; 1
    18de:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_SetPinDirection>
	DIO_SetPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
    18e2:	82 e0       	ldi	r24, 0x02	; 2
    18e4:	6f ef       	ldi	r22, 0xFF	; 255
    18e6:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_SetPortDirection>
    18ea:	fe 01       	movw	r30, r28
    18ec:	e9 5a       	subi	r30, 0xA9	; 169
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 ef       	ldi	r26, 0xF0	; 240
    18f6:	b1 e4       	ldi	r27, 0x41	; 65
    18f8:	80 83       	st	Z, r24
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	a2 83       	std	Z+2, r26	; 0x02
    18fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	8e 01       	movw	r16, r28
    1902:	0d 5a       	subi	r16, 0xAD	; 173
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	fe 01       	movw	r30, r28
    1908:	e9 5a       	subi	r30, 0xA9	; 169
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	60 81       	ld	r22, Z
    190e:	71 81       	ldd	r23, Z+1	; 0x01
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a ef       	ldi	r20, 0xFA	; 250
    191a:	54 e4       	ldi	r21, 0x44	; 68
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	f8 01       	movw	r30, r16
    1926:	80 83       	st	Z, r24
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	a2 83       	std	Z+2, r26	; 0x02
    192c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    192e:	fe 01       	movw	r30, r28
    1930:	ed 5a       	subi	r30, 0xAD	; 173
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	44 f4       	brge	.+16     	; 0x195c <LCD_Init+0xb2>
		__ticks = 1;
    194c:	fe 01       	movw	r30, r28
    194e:	ef 5a       	subi	r30, 0xAF	; 175
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	80 83       	st	Z, r24
    195a:	64 c0       	rjmp	.+200    	; 0x1a24 <LCD_Init+0x17a>
	else if (__tmp > 65535)
    195c:	fe 01       	movw	r30, r28
    195e:	ed 5a       	subi	r30, 0xAD	; 173
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	3f ef       	ldi	r19, 0xFF	; 255
    196e:	4f e7       	ldi	r20, 0x7F	; 127
    1970:	57 e4       	ldi	r21, 0x47	; 71
    1972:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1976:	18 16       	cp	r1, r24
    1978:	0c f0       	brlt	.+2      	; 0x197c <LCD_Init+0xd2>
    197a:	43 c0       	rjmp	.+134    	; 0x1a02 <LCD_Init+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	fe 01       	movw	r30, r28
    197e:	e9 5a       	subi	r30, 0xA9	; 169
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e2       	ldi	r20, 0x20	; 32
    1990:	51 e4       	ldi	r21, 0x41	; 65
    1992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	8e 01       	movw	r16, r28
    199c:	0f 5a       	subi	r16, 0xAF	; 175
    199e:	1f 4f       	sbci	r17, 0xFF	; 255
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	f8 01       	movw	r30, r16
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
    19b2:	1f c0       	rjmp	.+62     	; 0x19f2 <LCD_Init+0x148>
    19b4:	fe 01       	movw	r30, r28
    19b6:	e1 5b       	subi	r30, 0xB1	; 177
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	88 ec       	ldi	r24, 0xC8	; 200
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19c2:	fe 01       	movw	r30, r28
    19c4:	e1 5b       	subi	r30, 0xB1	; 177
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_Init+0x122>
    19d0:	fe 01       	movw	r30, r28
    19d2:	e1 5b       	subi	r30, 0xB1	; 177
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	de 01       	movw	r26, r28
    19dc:	af 5a       	subi	r26, 0xAF	; 175
    19de:	bf 4f       	sbci	r27, 0xFF	; 255
    19e0:	fe 01       	movw	r30, r28
    19e2:	ef 5a       	subi	r30, 0xAF	; 175
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	11 96       	adiw	r26, 0x01	; 1
    19ee:	9c 93       	st	X, r25
    19f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	fe 01       	movw	r30, r28
    19f4:	ef 5a       	subi	r30, 0xAF	; 175
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	d1 f6       	brne	.-76     	; 0x19b4 <LCD_Init+0x10a>
    1a00:	27 c0       	rjmp	.+78     	; 0x1a50 <LCD_Init+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	8e 01       	movw	r16, r28
    1a04:	0f 5a       	subi	r16, 0xAF	; 175
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	fe 01       	movw	r30, r28
    1a0a:	ed 5a       	subi	r30, 0xAD	; 173
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	f8 01       	movw	r30, r16
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
    1a24:	de 01       	movw	r26, r28
    1a26:	a3 5b       	subi	r26, 0xB3	; 179
    1a28:	bf 4f       	sbci	r27, 0xFF	; 255
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	ef 5a       	subi	r30, 0xAF	; 175
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	8d 93       	st	X+, r24
    1a36:	9c 93       	st	X, r25
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e3 5b       	subi	r30, 0xB3	; 179
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_Init+0x198>
    1a46:	fe 01       	movw	r30, r28
    1a48:	e3 5b       	subi	r30, 0xB3	; 179
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24

	_delay_ms(30);
	LCD_Send_Command(_LCD_8BIT_MODE_2_LINE);
    1a50:	88 e3       	ldi	r24, 0x38	; 56
    1a52:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_Send_Command>
    1a56:	fe 01       	movw	r30, r28
    1a58:	e7 5b       	subi	r30, 0xB7	; 183
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e2       	ldi	r26, 0x20	; 32
    1a62:	b2 e4       	ldi	r27, 0x42	; 66
    1a64:	80 83       	st	Z, r24
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	a2 83       	std	Z+2, r26	; 0x02
    1a6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a6c:	8e 01       	movw	r16, r28
    1a6e:	0b 5b       	subi	r16, 0xBB	; 187
    1a70:	1f 4f       	sbci	r17, 0xFF	; 255
    1a72:	fe 01       	movw	r30, r28
    1a74:	e7 5b       	subi	r30, 0xB7	; 183
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	2b ea       	ldi	r18, 0xAB	; 171
    1a82:	3a ea       	ldi	r19, 0xAA	; 170
    1a84:	4a e2       	ldi	r20, 0x2A	; 42
    1a86:	50 e4       	ldi	r21, 0x40	; 64
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	f8 01       	movw	r30, r16
    1a92:	80 83       	st	Z, r24
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	a2 83       	std	Z+2, r26	; 0x02
    1a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	eb 5b       	subi	r30, 0xBB	; 187
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	34 f4       	brge	.+12     	; 0x1ac4 <LCD_Init+0x21a>
		__ticks = 1;
    1ab8:	fe 01       	movw	r30, r28
    1aba:	ec 5b       	subi	r30, 0xBC	; 188
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	80 83       	st	Z, r24
    1ac2:	a7 c0       	rjmp	.+334    	; 0x1c12 <LCD_Init+0x368>
	else if (__tmp > 255)
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	eb 5b       	subi	r30, 0xBB	; 187
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	60 81       	ld	r22, Z
    1acc:	71 81       	ldd	r23, Z+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	53 e4       	ldi	r21, 0x43	; 67
    1ada:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	0c f0       	brlt	.+2      	; 0x1ae4 <LCD_Init+0x23a>
    1ae2:	87 c0       	rjmp	.+270    	; 0x1bf2 <LCD_Init+0x348>
	{
		_delay_ms(__us / 1000.0);
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e7 5b       	subi	r30, 0xB7	; 183
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	60 81       	ld	r22, Z
    1aec:	71 81       	ldd	r23, Z+1	; 0x01
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a e7       	ldi	r20, 0x7A	; 122
    1af8:	54 e4       	ldi	r21, 0x44	; 68
    1afa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	fe 01       	movw	r30, r28
    1b04:	e0 5c       	subi	r30, 0xC0	; 192
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 83       	st	Z, r24
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	a2 83       	std	Z+2, r26	; 0x02
    1b0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b10:	fe 01       	movw	r30, r28
    1b12:	e0 5c       	subi	r30, 0xC0	; 192
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a ef       	ldi	r20, 0xFA	; 250
    1b24:	54 e4       	ldi	r21, 0x44	; 68
    1b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	8c af       	std	Y+60, r24	; 0x3c
    1b30:	9d af       	std	Y+61, r25	; 0x3d
    1b32:	ae af       	std	Y+62, r26	; 0x3e
    1b34:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    1b36:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b38:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4a:	88 23       	and	r24, r24
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <LCD_Init+0x2ae>
		__ticks = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9b af       	std	Y+59, r25	; 0x3b
    1b54:	8a af       	std	Y+58, r24	; 0x3a
    1b56:	42 c0       	rjmp	.+132    	; 0x1bdc <LCD_Init+0x332>
	else if (__tmp > 65535)
    1b58:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b5a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	4f e7       	ldi	r20, 0x7F	; 127
    1b66:	57 e4       	ldi	r21, 0x47	; 71
    1b68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	64 f5       	brge	.+88     	; 0x1bc8 <LCD_Init+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	fe 01       	movw	r30, r28
    1b72:	e0 5c       	subi	r30, 0xC0	; 192
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e2       	ldi	r20, 0x20	; 32
    1b84:	51 e4       	ldi	r21, 0x41	; 65
    1b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9b af       	std	Y+59, r25	; 0x3b
    1b9c:	8a af       	std	Y+58, r24	; 0x3a
    1b9e:	0f c0       	rjmp	.+30     	; 0x1bbe <LCD_Init+0x314>
    1ba0:	88 ec       	ldi	r24, 0xC8	; 200
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	99 af       	std	Y+57, r25	; 0x39
    1ba6:	88 af       	std	Y+56, r24	; 0x38
    1ba8:	88 ad       	ldd	r24, Y+56	; 0x38
    1baa:	99 ad       	ldd	r25, Y+57	; 0x39
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_Init+0x302>
    1bb0:	99 af       	std	Y+57, r25	; 0x39
    1bb2:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bb6:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	9b af       	std	Y+59, r25	; 0x3b
    1bbc:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bc0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	69 f7       	brne	.-38     	; 0x1ba0 <LCD_Init+0x2f6>
    1bc6:	2e c0       	rjmp	.+92     	; 0x1c24 <LCD_Init+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bca:	7d ad       	ldd	r23, Y+61	; 0x3d
    1bcc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bce:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9b af       	std	Y+59, r25	; 0x3b
    1bda:	8a af       	std	Y+58, r24	; 0x3a
    1bdc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bde:	9b ad       	ldd	r25, Y+59	; 0x3b
    1be0:	9f ab       	std	Y+55, r25	; 0x37
    1be2:	8e ab       	std	Y+54, r24	; 0x36
    1be4:	8e a9       	ldd	r24, Y+54	; 0x36
    1be6:	9f a9       	ldd	r25, Y+55	; 0x37
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_Init+0x33e>
    1bec:	9f ab       	std	Y+55, r25	; 0x37
    1bee:	8e ab       	std	Y+54, r24	; 0x36
    1bf0:	19 c0       	rjmp	.+50     	; 0x1c24 <LCD_Init+0x37a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bf2:	8e 01       	movw	r16, r28
    1bf4:	0c 5b       	subi	r16, 0xBC	; 188
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	eb 5b       	subi	r30, 0xBB	; 187
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	60 81       	ld	r22, Z
    1c00:	71 81       	ldd	r23, Z+1	; 0x01
    1c02:	82 81       	ldd	r24, Z+2	; 0x02
    1c04:	93 81       	ldd	r25, Z+3	; 0x03
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	f8 01       	movw	r30, r16
    1c10:	80 83       	st	Z, r24
    1c12:	fe 01       	movw	r30, r28
    1c14:	ec 5b       	subi	r30, 0xBC	; 188
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	80 81       	ld	r24, Z
    1c1a:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c1c:	8d a9       	ldd	r24, Y+53	; 0x35
    1c1e:	8a 95       	dec	r24
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_Init+0x374>
    1c22:	8d ab       	std	Y+53, r24	; 0x35

	_delay_us(40);
	LCD_Send_Command(_LCD_CURSOR_OFF_DISPLAY_ON);
    1c24:	8c e0       	ldi	r24, 0x0C	; 12
    1c26:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_Send_Command>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	a0 e2       	ldi	r26, 0x20	; 32
    1c30:	b2 e4       	ldi	r27, 0x42	; 66
    1c32:	89 ab       	std	Y+49, r24	; 0x31
    1c34:	9a ab       	std	Y+50, r25	; 0x32
    1c36:	ab ab       	std	Y+51, r26	; 0x33
    1c38:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c40:	9c a9       	ldd	r25, Y+52	; 0x34
    1c42:	2b ea       	ldi	r18, 0xAB	; 171
    1c44:	3a ea       	ldi	r19, 0xAA	; 170
    1c46:	4a e2       	ldi	r20, 0x2A	; 42
    1c48:	50 e4       	ldi	r21, 0x40	; 64
    1c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8d a7       	std	Y+45, r24	; 0x2d
    1c54:	9e a7       	std	Y+46, r25	; 0x2e
    1c56:	af a7       	std	Y+47, r26	; 0x2f
    1c58:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1c5a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c5c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c60:	98 a9       	ldd	r25, Y+48	; 0x30
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	5f e3       	ldi	r21, 0x3F	; 63
    1c6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c6e:	88 23       	and	r24, r24
    1c70:	1c f4       	brge	.+6      	; 0x1c78 <LCD_Init+0x3ce>
		__ticks = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	8c a7       	std	Y+44, r24	; 0x2c
    1c76:	91 c0       	rjmp	.+290    	; 0x1d9a <LCD_Init+0x4f0>
	else if (__tmp > 255)
    1c78:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c7a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	53 e4       	ldi	r21, 0x43	; 67
    1c88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	0c f0       	brlt	.+2      	; 0x1c92 <LCD_Init+0x3e8>
    1c90:	7b c0       	rjmp	.+246    	; 0x1d88 <LCD_Init+0x4de>
	{
		_delay_ms(__us / 1000.0);
    1c92:	69 a9       	ldd	r22, Y+49	; 0x31
    1c94:	7a a9       	ldd	r23, Y+50	; 0x32
    1c96:	8b a9       	ldd	r24, Y+51	; 0x33
    1c98:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a e7       	ldi	r20, 0x7A	; 122
    1ca0:	54 e4       	ldi	r21, 0x44	; 68
    1ca2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	88 a7       	std	Y+40, r24	; 0x28
    1cac:	99 a7       	std	Y+41, r25	; 0x29
    1cae:	aa a7       	std	Y+42, r26	; 0x2a
    1cb0:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	68 a5       	ldd	r22, Y+40	; 0x28
    1cb4:	79 a5       	ldd	r23, Y+41	; 0x29
    1cb6:	8a a5       	ldd	r24, Y+42	; 0x2a
    1cb8:	9b a5       	ldd	r25, Y+43	; 0x2b
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a ef       	ldi	r20, 0xFA	; 250
    1cc0:	54 e4       	ldi	r21, 0x44	; 68
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8c a3       	std	Y+36, r24	; 0x24
    1ccc:	9d a3       	std	Y+37, r25	; 0x25
    1cce:	ae a3       	std	Y+38, r26	; 0x26
    1cd0:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1cd2:	6c a1       	ldd	r22, Y+36	; 0x24
    1cd4:	7d a1       	ldd	r23, Y+37	; 0x25
    1cd6:	8e a1       	ldd	r24, Y+38	; 0x26
    1cd8:	9f a1       	ldd	r25, Y+39	; 0x27
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <LCD_Init+0x44a>
		__ticks = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9b a3       	std	Y+35, r25	; 0x23
    1cf0:	8a a3       	std	Y+34, r24	; 0x22
    1cf2:	3f c0       	rjmp	.+126    	; 0x1d72 <LCD_Init+0x4c8>
	else if (__tmp > 65535)
    1cf4:	6c a1       	ldd	r22, Y+36	; 0x24
    1cf6:	7d a1       	ldd	r23, Y+37	; 0x25
    1cf8:	8e a1       	ldd	r24, Y+38	; 0x26
    1cfa:	9f a1       	ldd	r25, Y+39	; 0x27
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	57 e4       	ldi	r21, 0x47	; 71
    1d04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	4c f5       	brge	.+82     	; 0x1d5e <LCD_Init+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	68 a5       	ldd	r22, Y+40	; 0x28
    1d0e:	79 a5       	ldd	r23, Y+41	; 0x29
    1d10:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d12:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9b a3       	std	Y+35, r25	; 0x23
    1d32:	8a a3       	std	Y+34, r24	; 0x22
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <LCD_Init+0x4aa>
    1d36:	88 ec       	ldi	r24, 0xC8	; 200
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	99 a3       	std	Y+33, r25	; 0x21
    1d3c:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d3e:	88 a1       	ldd	r24, Y+32	; 0x20
    1d40:	99 a1       	ldd	r25, Y+33	; 0x21
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_Init+0x498>
    1d46:	99 a3       	std	Y+33, r25	; 0x21
    1d48:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	8a a1       	ldd	r24, Y+34	; 0x22
    1d4c:	9b a1       	ldd	r25, Y+35	; 0x23
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	9b a3       	std	Y+35, r25	; 0x23
    1d52:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d54:	8a a1       	ldd	r24, Y+34	; 0x22
    1d56:	9b a1       	ldd	r25, Y+35	; 0x23
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <LCD_Init+0x48c>
    1d5c:	24 c0       	rjmp	.+72     	; 0x1da6 <LCD_Init+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5e:	6c a1       	ldd	r22, Y+36	; 0x24
    1d60:	7d a1       	ldd	r23, Y+37	; 0x25
    1d62:	8e a1       	ldd	r24, Y+38	; 0x26
    1d64:	9f a1       	ldd	r25, Y+39	; 0x27
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9b a3       	std	Y+35, r25	; 0x23
    1d70:	8a a3       	std	Y+34, r24	; 0x22
    1d72:	8a a1       	ldd	r24, Y+34	; 0x22
    1d74:	9b a1       	ldd	r25, Y+35	; 0x23
    1d76:	9f 8f       	std	Y+31, r25	; 0x1f
    1d78:	8e 8f       	std	Y+30, r24	; 0x1e
    1d7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d7c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_Init+0x4d4>
    1d82:	9f 8f       	std	Y+31, r25	; 0x1f
    1d84:	8e 8f       	std	Y+30, r24	; 0x1e
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <LCD_Init+0x4fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d88:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d8a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	8c a7       	std	Y+44, r24	; 0x2c
    1d9a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d9c:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1da0:	8a 95       	dec	r24
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <LCD_Init+0x4f6>
    1da4:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_us(40);
	LCD_Send_Command(_LCD_CLEAR);
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_Send_Command>
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 e0       	ldi	r26, 0x00	; 0
    1db2:	b0 e4       	ldi	r27, 0x40	; 64
    1db4:	89 8f       	std	Y+25, r24	; 0x19
    1db6:	9a 8f       	std	Y+26, r25	; 0x1a
    1db8:	ab 8f       	std	Y+27, r26	; 0x1b
    1dba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1dbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a ef       	ldi	r20, 0xFA	; 250
    1dca:	54 e4       	ldi	r21, 0x44	; 68
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	8d 8b       	std	Y+21, r24	; 0x15
    1dd6:	9e 8b       	std	Y+22, r25	; 0x16
    1dd8:	af 8b       	std	Y+23, r26	; 0x17
    1dda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ddc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dde:	7e 89       	ldd	r23, Y+22	; 0x16
    1de0:	8f 89       	ldd	r24, Y+23	; 0x17
    1de2:	98 8d       	ldd	r25, Y+24	; 0x18
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df0:	88 23       	and	r24, r24
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <LCD_Init+0x554>
		__ticks = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9c 8b       	std	Y+20, r25	; 0x14
    1dfa:	8b 8b       	std	Y+19, r24	; 0x13
    1dfc:	3f c0       	rjmp	.+126    	; 0x1e7c <LCD_Init+0x5d2>
	else if (__tmp > 65535)
    1dfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1e00:	7e 89       	ldd	r23, Y+22	; 0x16
    1e02:	8f 89       	ldd	r24, Y+23	; 0x17
    1e04:	98 8d       	ldd	r25, Y+24	; 0x18
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	4c f5       	brge	.+82     	; 0x1e68 <LCD_Init+0x5be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e16:	69 8d       	ldd	r22, Y+25	; 0x19
    1e18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9c 8b       	std	Y+20, r25	; 0x14
    1e3c:	8b 8b       	std	Y+19, r24	; 0x13
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <LCD_Init+0x5b4>
    1e40:	88 ec       	ldi	r24, 0xC8	; 200
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9a 8b       	std	Y+18, r25	; 0x12
    1e46:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e48:	89 89       	ldd	r24, Y+17	; 0x11
    1e4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_Init+0x5a2>
    1e50:	9a 8b       	std	Y+18, r25	; 0x12
    1e52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	8b 89       	ldd	r24, Y+19	; 0x13
    1e56:	9c 89       	ldd	r25, Y+20	; 0x14
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	9c 8b       	std	Y+20, r25	; 0x14
    1e5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e60:	9c 89       	ldd	r25, Y+20	; 0x14
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <LCD_Init+0x596>
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <LCD_Init+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	6d 89       	ldd	r22, Y+21	; 0x15
    1e6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9c 8b       	std	Y+20, r25	; 0x14
    1e7a:	8b 8b       	std	Y+19, r24	; 0x13
    1e7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e80:	98 8b       	std	Y+16, r25	; 0x10
    1e82:	8f 87       	std	Y+15, r24	; 0x0f
    1e84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e86:	98 89       	ldd	r25, Y+16	; 0x10
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_Init+0x5de>
    1e8c:	98 8b       	std	Y+16, r25	; 0x10
    1e8e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);
	LCD_Send_Command(_LCD_ENTRY_MODE);
    1e90:	86 e0       	ldi	r24, 0x06	; 6
    1e92:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_Send_Command>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	a0 ef       	ldi	r26, 0xF0	; 240
    1e9c:	b1 e4       	ldi	r27, 0x41	; 65
    1e9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ea0:	9c 87       	std	Y+12, r25	; 0x0c
    1ea2:	ad 87       	std	Y+13, r26	; 0x0d
    1ea4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	4a ef       	ldi	r20, 0xFA	; 250
    1eb4:	54 e4       	ldi	r21, 0x44	; 68
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	8f 83       	std	Y+7, r24	; 0x07
    1ec0:	98 87       	std	Y+8, r25	; 0x08
    1ec2:	a9 87       	std	Y+9, r26	; 0x09
    1ec4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec8:	78 85       	ldd	r23, Y+8	; 0x08
    1eca:	89 85       	ldd	r24, Y+9	; 0x09
    1ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e8       	ldi	r20, 0x80	; 128
    1ed4:	5f e3       	ldi	r21, 0x3F	; 63
    1ed6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eda:	88 23       	and	r24, r24
    1edc:	2c f4       	brge	.+10     	; 0x1ee8 <LCD_Init+0x63e>
		__ticks = 1;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	3f c0       	rjmp	.+126    	; 0x1f66 <LCD_Init+0x6bc>
	else if (__tmp > 65535)
    1ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eea:	78 85       	ldd	r23, Y+8	; 0x08
    1eec:	89 85       	ldd	r24, Y+9	; 0x09
    1eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	3f ef       	ldi	r19, 0xFF	; 255
    1ef4:	4f e7       	ldi	r20, 0x7F	; 127
    1ef6:	57 e4       	ldi	r21, 0x47	; 71
    1ef8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1efc:	18 16       	cp	r1, r24
    1efe:	4c f5       	brge	.+82     	; 0x1f52 <LCD_Init+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e2       	ldi	r20, 0x20	; 32
    1f0e:	51 e4       	ldi	r21, 0x41	; 65
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
    1f28:	0f c0       	rjmp	.+30     	; 0x1f48 <LCD_Init+0x69e>
    1f2a:	88 ec       	ldi	r24, 0xC8	; 200
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9c 83       	std	Y+4, r25	; 0x04
    1f30:	8b 83       	std	Y+3, r24	; 0x03
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <LCD_Init+0x68c>
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	69 f7       	brne	.-38     	; 0x1f2a <LCD_Init+0x680>
    1f50:	14 c0       	rjmp	.+40     	; 0x1f7a <LCD_Init+0x6d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f52:	6f 81       	ldd	r22, Y+7	; 0x07
    1f54:	78 85       	ldd	r23, Y+8	; 0x08
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9e 83       	std	Y+6, r25	; 0x06
    1f64:	8d 83       	std	Y+5, r24	; 0x05
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <LCD_Init+0x6c8>
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(30);
	LCD_Send_Command(_LCD_RETURN_HOME);
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_Send_Command>
}
    1f80:	c6 5a       	subi	r28, 0xA6	; 166
    1f82:	df 4f       	sbci	r29, 0xFF	; 255
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	1f 91       	pop	r17
    1f94:	0f 91       	pop	r16
    1f96:	08 95       	ret

00001f98 <LCD_Send_Command>:
/*******************************************************************************
 * @brief Send a Command to LCD in the Instruction Register
 * @parameter u8command 		(uint8)command
 ********************************************************************************/
void LCD_Send_Command(uint8 u8command)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	0f 92       	push	r0
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS "Register Select" Pin to 0 to write in Instruction Register (IR)*/
	DIO_SetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_LOW);
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
    1fa6:	64 e0       	ldi	r22, 0x04	; 4
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>

	/*Set RW "Read Write" pin to 0 to write*/
	DIO_SetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,PIN_LOW);
    1fae:	83 e0       	ldi	r24, 0x03	; 3
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>

	/*Send Command*/
	DIO_SetPortValue(LCD_DATA_PORT,u8command);
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	69 81       	ldd	r22, Y+1	; 0x01
    1fbc:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_SetPortValue>

	/*Enable Pulse*/
	LCD_Send_Enable_Signal();
    1fc0:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_Send_Enable_Signal>
}
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <LCD_Send_Data>:
/*******************************************************************************
 * @brief Send a Data 'Char' to LCD in the Data Register
 * @parameter u8Data 		(uint8)Data
 ********************************************************************************/
void LCD_Send_Data(uint8 u8Data)
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	0f 92       	push	r0
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS "Register Select" Pin to 0 to write in Data Register (DR)*/
	DIO_SetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_HIGH);
    1fd8:	83 e0       	ldi	r24, 0x03	; 3
    1fda:	64 e0       	ldi	r22, 0x04	; 4
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>

	/*Set RW "Read Write" pin to 0 to write*/
	DIO_SetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,PIN_LOW);
    1fe2:	83 e0       	ldi	r24, 0x03	; 3
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>

	/*Send Command*/
	DIO_SetPortValue(LCD_DATA_PORT,u8Data);
    1fec:	82 e0       	ldi	r24, 0x02	; 2
    1fee:	69 81       	ldd	r22, Y+1	; 0x01
    1ff0:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_SetPortValue>

	/*Enable Pulse*/
	LCD_Send_Enable_Signal();
    1ff4:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_Send_Enable_Signal>
}
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <LCD_Write_String>:

/*******************************************************************************
 * @brief Write a String on LCD
 * @parameter *ptr		a pointer to char points to string (array of char)
 ********************************************************************************/
void LCD_Write_String(const uint8 *ptr){
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <LCD_Write_String+0x6>
    2006:	0f 92       	push	r0
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	9b 83       	std	Y+3, r25	; 0x03
    200e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0 ;
    2010:	19 82       	std	Y+1, r1	; 0x01
    2012:	0e c0       	rjmp	.+28     	; 0x2030 <LCD_Write_String+0x30>
	while('\0' != ptr[i])
	{
		LCD_Send_Data(ptr[i]);
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	9b 81       	ldd	r25, Y+3	; 0x03
    201e:	fc 01       	movw	r30, r24
    2020:	e2 0f       	add	r30, r18
    2022:	f3 1f       	adc	r31, r19
    2024:	80 81       	ld	r24, Z
    2026:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <LCD_Send_Data>
		i++;
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	89 83       	std	Y+1, r24	; 0x01
 * @brief Write a String on LCD
 * @parameter *ptr		a pointer to char points to string (array of char)
 ********************************************************************************/
void LCD_Write_String(const uint8 *ptr){
	uint8 i=0 ;
	while('\0' != ptr[i])
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	9b 81       	ldd	r25, Y+3	; 0x03
    203a:	fc 01       	movw	r30, r24
    203c:	e2 0f       	add	r30, r18
    203e:	f3 1f       	adc	r31, r19
    2040:	80 81       	ld	r24, Z
    2042:	88 23       	and	r24, r24
    2044:	39 f7       	brne	.-50     	; 0x2014 <LCD_Write_String+0x14>
	{
		LCD_Send_Data(ptr[i]);
		i++;
	}
}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <LCD_Write_String_Position>:


void LCD_Write_String_Position(const uint8 *ptr , uint8 ROW , uint8 COL){
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	00 d0       	rcall	.+0      	; 0x2058 <LCD_Write_String_Position+0x6>
    2058:	00 d0       	rcall	.+0      	; 0x205a <LCD_Write_String_Position+0x8>
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	9a 83       	std	Y+2, r25	; 0x02
    2060:	89 83       	std	Y+1, r24	; 0x01
    2062:	6b 83       	std	Y+3, r22	; 0x03
    2064:	4c 83       	std	Y+4, r20	; 0x04
	LCD_Set_Cursor(ROW , COL);
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	6c 81       	ldd	r22, Y+4	; 0x04
    206a:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_Set_Cursor>
	LCD_Write_String(ptr);
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	0e 94 00 10 	call	0x2000	; 0x2000 <LCD_Write_String>
}
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <LCD_Set_Cursor>:

void LCD_Set_Cursor( uint8 ROW , uint8 COL ){
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	00 d0       	rcall	.+0      	; 0x208a <LCD_Set_Cursor+0x6>
    208a:	00 d0       	rcall	.+0      	; 0x208c <LCD_Set_Cursor+0x8>
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	6a 83       	std	Y+2, r22	; 0x02
	COL--;
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	81 50       	subi	r24, 0x01	; 1
    2098:	8a 83       	std	Y+2, r24	; 0x02

	switch(ROW)
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	3c 83       	std	Y+4, r19	; 0x04
    20a2:	2b 83       	std	Y+3, r18	; 0x03
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	9c 81       	ldd	r25, Y+4	; 0x04
    20a8:	81 30       	cpi	r24, 0x01	; 1
    20aa:	91 05       	cpc	r25, r1
    20ac:	31 f0       	breq	.+12     	; 0x20ba <LCD_Set_Cursor+0x36>
    20ae:	2b 81       	ldd	r18, Y+3	; 0x03
    20b0:	3c 81       	ldd	r19, Y+4	; 0x04
    20b2:	22 30       	cpi	r18, 0x02	; 2
    20b4:	31 05       	cpc	r19, r1
    20b6:	31 f0       	breq	.+12     	; 0x20c4 <LCD_Set_Cursor+0x40>
    20b8:	09 c0       	rjmp	.+18     	; 0x20cc <LCD_Set_Cursor+0x48>
	{				/*0x80 is the first address for DDRAM */
		case ROW1 : LCD_Send_Command( 0x80 + (COL) ); 	     break;
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	80 58       	subi	r24, 0x80	; 128
    20be:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_Send_Command>
    20c2:	04 c0       	rjmp	.+8      	; 0x20cc <LCD_Set_Cursor+0x48>
		case ROW2 : LCD_Send_Command( 0x80 + (COL + 0x40) ); break;
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	80 54       	subi	r24, 0x40	; 64
    20c8:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <LCD_Send_Command>
		default : ;
	}
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <LCD_Send_Enable_Signal>:

/*Enable Signal to latch the data in DR or IR*/
void LCD_Send_Enable_Signal(){
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	2e 97       	sbiw	r28, 0x0e	; 14
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    20ee:	83 e0       	ldi	r24, 0x03	; 3
    20f0:	60 e0       	ldi	r22, 0x00	; 0
    20f2:	41 e0       	ldi	r20, 0x01	; 1
    20f4:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	a0 e4       	ldi	r26, 0x40	; 64
    20fe:	b0 e4       	ldi	r27, 0x40	; 64
    2100:	8b 87       	std	Y+11, r24	; 0x0b
    2102:	9c 87       	std	Y+12, r25	; 0x0c
    2104:	ad 87       	std	Y+13, r26	; 0x0d
    2106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	6b 85       	ldd	r22, Y+11	; 0x0b
    210a:	7c 85       	ldd	r23, Y+12	; 0x0c
    210c:	8d 85       	ldd	r24, Y+13	; 0x0d
    210e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a ef       	ldi	r20, 0xFA	; 250
    2116:	54 e4       	ldi	r21, 0x44	; 68
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8f 83       	std	Y+7, r24	; 0x07
    2122:	98 87       	std	Y+8, r25	; 0x08
    2124:	a9 87       	std	Y+9, r26	; 0x09
    2126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	2c f4       	brge	.+10     	; 0x214a <LCD_Send_Enable_Signal+0x70>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <LCD_Send_Enable_Signal+0xee>
	else if (__tmp > 65535)
    214a:	6f 81       	ldd	r22, Y+7	; 0x07
    214c:	78 85       	ldd	r23, Y+8	; 0x08
    214e:	89 85       	ldd	r24, Y+9	; 0x09
    2150:	9a 85       	ldd	r25, Y+10	; 0x0a
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	4c f5       	brge	.+82     	; 0x21b4 <LCD_Send_Enable_Signal+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2162:	6b 85       	ldd	r22, Y+11	; 0x0b
    2164:	7c 85       	ldd	r23, Y+12	; 0x0c
    2166:	8d 85       	ldd	r24, Y+13	; 0x0d
    2168:	9e 85       	ldd	r25, Y+14	; 0x0e
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	8d 83       	std	Y+5, r24	; 0x05
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <LCD_Send_Enable_Signal+0xd0>
    218c:	88 ec       	ldi	r24, 0xC8	; 200
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9c 83       	std	Y+4, r25	; 0x04
    2192:	8b 83       	std	Y+3, r24	; 0x03
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <LCD_Send_Enable_Signal+0xbe>
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	9e 81       	ldd	r25, Y+6	; 0x06
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	69 f7       	brne	.-38     	; 0x218c <LCD_Send_Enable_Signal+0xb2>
    21b2:	14 c0       	rjmp	.+40     	; 0x21dc <LCD_Send_Enable_Signal+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9e 83       	std	Y+6, r25	; 0x06
    21c6:	8d 83       	std	Y+5, r24	; 0x05
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	9a 83       	std	Y+2, r25	; 0x02
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_Send_Enable_Signal+0xfa>
    21d8:	9a 83       	std	Y+2, r25	; 0x02
    21da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	DIO_SetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    21dc:	83 e0       	ldi	r24, 0x03	; 3
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>
}
    21e6:	2e 96       	adiw	r28, 0x0e	; 14
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <KEYPAD_init>:
									{'7', '8', '9', '/'},
									{'4', '5', '6', '*'},
									{'1', '2', '3', '-'},
									{'#', '0', '=', '+'}
                                 };
void KEYPAD_init(){
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	0f 92       	push	r0
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62

	uint8 i;
	for(i = OUTPUT_START; i <= OUTPUT_END ; i++)
    2202:	83 e0       	ldi	r24, 0x03	; 3
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	0d c0       	rjmp	.+26     	; 0x2222 <KEYPAD_init+0x2a>
	{
		/*Initialize Columns as an Output pins*/
		DIO_SetPinDirection(KEYPAD_PORT , i , PIN_OUTPUT);
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	69 81       	ldd	r22, Y+1	; 0x01
    220c:	41 e0       	ldi	r20, 0x01	; 1
    220e:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_SetPinDirection>
		DIO_SetPinValue(KEYPAD_PORT , i , PIN_HIGH);
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	69 81       	ldd	r22, Y+1	; 0x01
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>
									{'#', '0', '=', '+'}
                                 };
void KEYPAD_init(){

	uint8 i;
	for(i = OUTPUT_START; i <= OUTPUT_END ; i++)
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	8f 5f       	subi	r24, 0xFF	; 255
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	88 23       	and	r24, r24
    2226:	81 f3       	breq	.-32     	; 0x2208 <KEYPAD_init+0x10>
	{
		/*Initialize Columns as an Output pins*/
		DIO_SetPinDirection(KEYPAD_PORT , i , PIN_OUTPUT);
		DIO_SetPinValue(KEYPAD_PORT , i , PIN_HIGH);
	}
	for(i = INPUT_START; i <= INPUT_END ; i++)
    2228:	84 e0       	ldi	r24, 0x04	; 4
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	0d c0       	rjmp	.+26     	; 0x2248 <KEYPAD_init+0x50>
	{
		/*Initialize Rows Pins as Internal Pull Up*/
		DIO_SetPinDirection(KEYPAD_PORT , i , PIN_INPUT);
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	69 81       	ldd	r22, Y+1	; 0x01
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_SetPinDirection>
		DIO_SetPinValue(KEYPAD_PORT , i , PIN_HIGH);
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	69 81       	ldd	r22, Y+1	; 0x01
    223c:	41 e0       	ldi	r20, 0x01	; 1
    223e:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>
	{
		/*Initialize Columns as an Output pins*/
		DIO_SetPinDirection(KEYPAD_PORT , i , PIN_OUTPUT);
		DIO_SetPinValue(KEYPAD_PORT , i , PIN_HIGH);
	}
	for(i = INPUT_START; i <= INPUT_END ; i++)
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	8f 5f       	subi	r24, 0xFF	; 255
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	88 30       	cpi	r24, 0x08	; 8
    224c:	80 f3       	brcs	.-32     	; 0x222e <KEYPAD_init+0x36>
		DIO_SetPinValue(KEYPAD_PORT , i , PIN_HIGH);
	}
//		DDRA = 0b11110000;
//		PORTA = 0b11111111;
//		PINA = 0b11111111;
}
    224e:	0f 90       	pop	r0
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <KEYPAD_GetPressedKey>:



//
//
u8 KEYPAD_GetPressedKey(void){
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	00 d0       	rcall	.+0      	; 0x225c <KEYPAD_GetPressedKey+0x6>
    225c:	00 d0       	rcall	.+0      	; 0x225e <KEYPAD_GetPressedKey+0x8>
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62

	u8 KEY=KEY_NOT_PRESSED;
    2262:	8f ef       	ldi	r24, 0xFF	; 255
    2264:	8c 83       	std	Y+4, r24	; 0x04

	u8 row=0; //input
    2266:	1b 82       	std	Y+3, r1	; 0x03
	u8 column=0; //output
    2268:	1a 82       	std	Y+2, r1	; 0x02
	u8 i=0; //iterator
    226a:	19 82       	std	Y+1, r1	; 0x01


	for(column=OUTPUT_START;column<=OUTPUT_END;column++){
    226c:	83 e0       	ldi	r24, 0x03	; 3
    226e:	8a 83       	std	Y+2, r24	; 0x02
    2270:	3e c0       	rjmp	.+124    	; 0x22ee <KEYPAD_GetPressedKey+0x98>
		//deactivate all columns
		for(i=OUTPUT_START;i<=OUTPUT_END;i++){
    2272:	83 e0       	ldi	r24, 0x03	; 3
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	08 c0       	rjmp	.+16     	; 0x2288 <KEYPAD_GetPressedKey+0x32>
			DIO_SetPinValue(KEYPAD_PORT,i,PIN_HIGH);
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	69 81       	ldd	r22, Y+1	; 0x01
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>
	u8 i=0; //iterator


	for(column=OUTPUT_START;column<=OUTPUT_END;column++){
		//deactivate all columns
		for(i=OUTPUT_START;i<=OUTPUT_END;i++){
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	8f 5f       	subi	r24, 0xFF	; 255
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	88 23       	and	r24, r24
    228c:	a9 f3       	breq	.-22     	; 0x2278 <KEYPAD_GetPressedKey+0x22>
			DIO_SetPinValue(KEYPAD_PORT,i,PIN_HIGH);
		}
		//column number is activated;
		DIO_SetPinValue(KEYPAD_PORT,column,PIN_LOW);
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	6a 81       	ldd	r22, Y+2	; 0x02
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>
		//SCAN ROWs
		for(row=INPUT_START;row<=INPUT_END;row++){
    2298:	84 e0       	ldi	r24, 0x04	; 4
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	22 c0       	rjmp	.+68     	; 0x22e2 <KEYPAD_GetPressedKey+0x8c>
			if(DIO_GetPinValue(KEYPAD_PORT,row)==PIN_LOW){
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	6b 81       	ldd	r22, Y+3	; 0x03
    22a2:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DIO_GetPinValue>
    22a6:	88 23       	and	r24, r24
    22a8:	c9 f4       	brne	.+50     	; 0x22dc <KEYPAD_GetPressedKey+0x86>
				KEY=btn_values[row-INPUT_START][column-OUTPUT_START];
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	88 2f       	mov	r24, r24
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	ac 01       	movw	r20, r24
    22b2:	44 50       	subi	r20, 0x04	; 4
    22b4:	50 40       	sbci	r21, 0x00	; 0
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9c 01       	movw	r18, r24
    22be:	23 50       	subi	r18, 0x03	; 3
    22c0:	30 40       	sbci	r19, 0x00	; 0
    22c2:	ca 01       	movw	r24, r20
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	82 0f       	add	r24, r18
    22ce:	93 1f       	adc	r25, r19
    22d0:	fc 01       	movw	r30, r24
    22d2:	ee 58       	subi	r30, 0x8E	; 142
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	80 81       	ld	r24, Z
    22d8:	8c 83       	std	Y+4, r24	; 0x04
    22da:	06 c0       	rjmp	.+12     	; 0x22e8 <KEYPAD_GetPressedKey+0x92>
			DIO_SetPinValue(KEYPAD_PORT,i,PIN_HIGH);
		}
		//column number is activated;
		DIO_SetPinValue(KEYPAD_PORT,column,PIN_LOW);
		//SCAN ROWs
		for(row=INPUT_START;row<=INPUT_END;row++){
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	8f 5f       	subi	r24, 0xFF	; 255
    22e0:	8b 83       	std	Y+3, r24	; 0x03
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	88 30       	cpi	r24, 0x08	; 8
    22e6:	d8 f2       	brcs	.-74     	; 0x229e <KEYPAD_GetPressedKey+0x48>
	u8 row=0; //input
	u8 column=0; //output
	u8 i=0; //iterator


	for(column=OUTPUT_START;column<=OUTPUT_END;column++){
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	8f 5f       	subi	r24, 0xFF	; 255
    22ec:	8a 83       	std	Y+2, r24	; 0x02
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	88 23       	and	r24, r24
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <KEYPAD_GetPressedKey+0xa0>
    22f4:	be cf       	rjmp	.-132    	; 0x2272 <KEYPAD_GetPressedKey+0x1c>
			}
		}
	}


	return KEY;
    22f6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <main>:

uint8 data = 0;
uint8 portstatus = 0;

int main()
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
	//LCD_Init();
	GLOBAL_Interrupt_ENABLE();
    230e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GLOBAL_Interrupt_ENABLE>
	EXT_Interrupt_Init();
    2312:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <EXT_Interrupt_Init>
	EXT_Interrupt_ENABLE(EXTI0);
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	0e 94 95 06 	call	0xd2a	; 0xd2a <EXT_Interrupt_ENABLE>
	EXT_Interrupt_ENABLE(EXTI1);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	0e 94 95 06 	call	0xd2a	; 0xd2a <EXT_Interrupt_ENABLE>


	DIO_SetPinDirection(PORT_D , PIN_0 , PIN_OUTPUT);
    2322:	83 e0       	ldi	r24, 0x03	; 3
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	41 e0       	ldi	r20, 0x01	; 1
    2328:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_D , PIN_1 , PIN_OUTPUT);
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	61 e0       	ldi	r22, 0x01	; 1
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_SetPinDirection>

	DIO_SetPinDirection(PORT_D , PIN_2 , PIN_INPUT);
    2336:	83 e0       	ldi	r24, 0x03	; 3
    2338:	62 e0       	ldi	r22, 0x02	; 2
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_SetPinDirection>
	DIO_SetPinValue(PORT_D , PIN_2 , PIN_HIGH);
    2340:	83 e0       	ldi	r24, 0x03	; 3
    2342:	62 e0       	ldi	r22, 0x02	; 2
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>
	DIO_SetPinDirection(PORT_D , PIN_3 , PIN_INPUT);
    234a:	83 e0       	ldi	r24, 0x03	; 3
    234c:	63 e0       	ldi	r22, 0x03	; 3
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_SetPinDirection>
	DIO_SetPinValue(PORT_D , PIN_3 , PIN_HIGH);
    2354:	83 e0       	ldi	r24, 0x03	; 3
    2356:	63 e0       	ldi	r22, 0x03	; 3
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_SetPinValue>
    235e:	ff cf       	rjmp	.-2      	; 0x235e <main+0x58>

00002360 <__vector_1>:

	}
	return 0;
}
void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ;
    void __vector_1 (void){
    2360:	1f 92       	push	r1
    2362:	0f 92       	push	r0
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	0f 92       	push	r0
    2368:	11 24       	eor	r1, r1
    236a:	2f 93       	push	r18
    236c:	3f 93       	push	r19
    236e:	4f 93       	push	r20
    2370:	5f 93       	push	r21
    2372:	6f 93       	push	r22
    2374:	7f 93       	push	r23
    2376:	8f 93       	push	r24
    2378:	9f 93       	push	r25
    237a:	af 93       	push	r26
    237c:	bf 93       	push	r27
    237e:	ef 93       	push	r30
    2380:	ff 93       	push	r31
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
	DIO_TogPinValue(PORT_D, PIN_0);
    238a:	83 e0       	ldi	r24, 0x03	; 3
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_TogPinValue>
	//LCD_Write_String_Position("INT0",2,1);
}
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	ff 91       	pop	r31
    2398:	ef 91       	pop	r30
    239a:	bf 91       	pop	r27
    239c:	af 91       	pop	r26
    239e:	9f 91       	pop	r25
    23a0:	8f 91       	pop	r24
    23a2:	7f 91       	pop	r23
    23a4:	6f 91       	pop	r22
    23a6:	5f 91       	pop	r21
    23a8:	4f 91       	pop	r20
    23aa:	3f 91       	pop	r19
    23ac:	2f 91       	pop	r18
    23ae:	0f 90       	pop	r0
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	0f 90       	pop	r0
    23b4:	1f 90       	pop	r1
    23b6:	18 95       	reti

000023b8 <__vector_2>:

void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ;
	void __vector_2 (void){
    23b8:	1f 92       	push	r1
    23ba:	0f 92       	push	r0
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	0f 92       	push	r0
    23c0:	11 24       	eor	r1, r1
    23c2:	8f 93       	push	r24
    23c4:	9f 93       	push	r25
    23c6:	af 93       	push	r26
    23c8:	bf 93       	push	r27
    23ca:	ef 93       	push	r30
    23cc:	ff 93       	push	r31
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTD, PIN_1);
    23d6:	a2 e3       	ldi	r26, 0x32	; 50
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e2 e3       	ldi	r30, 0x32	; 50
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	90 81       	ld	r25, Z
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	89 27       	eor	r24, r25
    23e4:	8c 93       	st	X, r24
	//LCD_Write_String_Position("INT1",2,1);

}
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	ff 91       	pop	r31
    23ec:	ef 91       	pop	r30
    23ee:	bf 91       	pop	r27
    23f0:	af 91       	pop	r26
    23f2:	9f 91       	pop	r25
    23f4:	8f 91       	pop	r24
    23f6:	0f 90       	pop	r0
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	0f 90       	pop	r0
    23fc:	1f 90       	pop	r1
    23fe:	18 95       	reti

00002400 <__prologue_saves__>:
    2400:	2f 92       	push	r2
    2402:	3f 92       	push	r3
    2404:	4f 92       	push	r4
    2406:	5f 92       	push	r5
    2408:	6f 92       	push	r6
    240a:	7f 92       	push	r7
    240c:	8f 92       	push	r8
    240e:	9f 92       	push	r9
    2410:	af 92       	push	r10
    2412:	bf 92       	push	r11
    2414:	cf 92       	push	r12
    2416:	df 92       	push	r13
    2418:	ef 92       	push	r14
    241a:	ff 92       	push	r15
    241c:	0f 93       	push	r16
    241e:	1f 93       	push	r17
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	ca 1b       	sub	r28, r26
    242a:	db 0b       	sbc	r29, r27
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	09 94       	ijmp

00002438 <__epilogue_restores__>:
    2438:	2a 88       	ldd	r2, Y+18	; 0x12
    243a:	39 88       	ldd	r3, Y+17	; 0x11
    243c:	48 88       	ldd	r4, Y+16	; 0x10
    243e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2440:	6e 84       	ldd	r6, Y+14	; 0x0e
    2442:	7d 84       	ldd	r7, Y+13	; 0x0d
    2444:	8c 84       	ldd	r8, Y+12	; 0x0c
    2446:	9b 84       	ldd	r9, Y+11	; 0x0b
    2448:	aa 84       	ldd	r10, Y+10	; 0x0a
    244a:	b9 84       	ldd	r11, Y+9	; 0x09
    244c:	c8 84       	ldd	r12, Y+8	; 0x08
    244e:	df 80       	ldd	r13, Y+7	; 0x07
    2450:	ee 80       	ldd	r14, Y+6	; 0x06
    2452:	fd 80       	ldd	r15, Y+5	; 0x05
    2454:	0c 81       	ldd	r16, Y+4	; 0x04
    2456:	1b 81       	ldd	r17, Y+3	; 0x03
    2458:	aa 81       	ldd	r26, Y+2	; 0x02
    245a:	b9 81       	ldd	r27, Y+1	; 0x01
    245c:	ce 0f       	add	r28, r30
    245e:	d1 1d       	adc	r29, r1
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	ed 01       	movw	r28, r26
    246c:	08 95       	ret

0000246e <_exit>:
    246e:	f8 94       	cli

00002470 <__stop_program>:
    2470:	ff cf       	rjmp	.-2      	; 0x2470 <__stop_program>
